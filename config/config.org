#+TITLE: Emacs configuration
#+AUTHOR: Richard G. Riley
#+EMAIL: rileyrg at g mail dot com
#+DESCRIPTION: emacs configuration orientated around lsp-mode,dap and company-mode
#+LANGUAGE: en
#+OPTIONS: tasks:nil
#+STARTUP: overview
#+EXCLUDE_TAGS: tasklist noexport

* Config tasks                                                     :tasklist:
* Project version control, git, .gitignore
  :PROPERTIES:
  :CUSTOM_ID: Project-version-control
  :END:
  I like to exclude everything and then add in what is important. So the first line of my [[~/.emacs.d/.gitignore][gitignore]] is "*".

  #+include: "../.gitignore" src git
* Building Emacs from source.
** Cloning from github
   You can clone emacs from the the [[https://github.com/emacs-mirror/emacs][github emacs mirror]]. to create an emacs development hierarchy and then checkout (in this instance) emacs 27 (I keep emacs source tree unde my emacs.d in a build directory):
   #+begin_src bash
     cd ~/.emacs.d/build
     git clone git@github.com:emacs-mirror/emacs.git
     git checkout emacs-27
   #+end_src
** compiling and adding symlinks on $PATH

   My own build uses the gtk toolkit and stores the build  under my $HOME/bin directory.

   It goes without saying you need to ensure your $HOME/bin is on the path before any system installed emacs.
   #+include: "~/.emacs.d/build/scripts/make-emacs" src bash


   More info can be sourced starting from the EmacsWiki [[https://www.emacswiki.org/emacs/BuildingEmacs][here.]]
* Setting up emacs as a default editor using a dot desktop file and associated protocol handler
  :PROPERTIES:
  :CUSTOM_ID: emacs-default-editor
  :END:
*** php.ini changes e.g /etc/php/7.3/php.ini
    ~xdebug.file_link_format~ is used by compliant apps to format a protocol uri. This is handled on my Linux system as a result of  [[file+sys:editor-config/emacsclient.desktop][emacsclient.desktop]]  documented below.
    #+include: "~/.emacs.d/editor-config/php.ini" src eshell
*** emacsclient-linenumber script to correctly parse the protocol in order to start emacs frame at correct line
    #+include: "~/.emacs.d/editor-config/emacsclient-linenumber" src bash
*** Gnome protocol handler desktop file
    Copy [[file+sys:editor-config/emacsclient.desktop][emacsclient.desktop]] to  ~/.local/share/applications (Debian & Gnome - your mileage may vary...)

    #+include: "../editor-config/emacsclient.desktop" src shell

    Update the desktop database:

    #+begin_src bash
      update-desktop-database ~/.local/share/applications
    #+end_src

    now allows emacsclient to be called.

    note: symlink the deprecated [[https://wiki.archlinux.org/index.php/XDG_MIME_Applications][~/.local/share/applications/mimeapps.lst]] to the one in ~/.config

    #+begin_src bash
      ln -sf  ~/config/mimeapps.lst ~/.local/share/applications/
    #+end_src
*** Always using emacsclient
    Set up a zshrc alias so that "emacs" actually invokes emacs client. In my .zshrc:
    #+begin_src shell
      alias emacs='emacsclient --create-frame --alternate-editor=""'
    #+end_src
* package management with straight.el
  :PROPERTIES:
  :CUSTOM_ID: package-management
  :END:
  I've started using [[https://github.com/raxod502/straight.el][straight.el]] which, in it's own words:-
  #+begin_quote
  - Init-file and version lockfiles as the sole source of truth. No persistent state kept elsewhere.
  - 100% reproducible package management, accounting for changes in packages, recipe repositories, configuration, and the package manager itself.
  - No support whatsoever for package.el.
  - Edit packages by editing their code, no extra steps required. Allow for manual version control operations.
  - Compatibility with MELPA, GNU ELPA, and Emacsmirror.
  - Trivial to quickly try out a package without permanently installing it.
  - Good for reproducing an issue with emacs -Q.
  #+end_quote

  A very useful feature is the ability to "freeze" your setup so that later, should newer packages leave your config broken, you can revert to the stable suite.
  See [[https://github.com/raxod502/straight.el#configuration-reproducibility][Configuration reproducibility]] for more details.
** straight.el bootstrap
   [[../straight-bootstrap.el][straight-bootstrap.el]] contains the bootstrap documented [[https://github.com/raxod502/straight.el#bootstrapping-straightel][here]].
   #+include: "../straight-bootstrap.el" src emacs-lisp
** use-package works with straight.el
   The [[https://github.com/jwiegley/use-package][use-package]] wrapper still works just fine. In [[./straight-bootstrap.el][straight-bootstrap.el]] see:-

   #+begin_src emacs-lisp :tangle no
     (straight-use-package
      '(use-package
         :type git
         :flavor melpa
         :files (:defaults (:exclude "bind-key.el"
                                     "bind-chord.el"
                                     "use-package-chords.el"
                                     "use-package-ensure-system-package.el")
                           "use-package-pkg.el")
         :host github
         :repo "jwiegley/use-package"))
     (setq straight-use-package-by-default t)
   #+end_src

*** use-package helper
    #+begin_src emacs-lisp
      (straight-use-package 'diminish)
    #+end_src

* Org-Babel and init.el tangling
  :PROPERTIES:
  :CUSTOM_ID: org-babel
  :END:
  The [[./init.el][init.el]] reads an org-mode config file and extracts the elisp source blocks to create the actual configuration that Emacs executes at startup.
  #+include: "init.el" src emacs-lisp
* Elisp library and custom-paths
  :PROPERTIES:
  :CUSTOM_ID: libraries-and-paths
  :END:
  I have a separate Elisp custom-paths.el file to add paths to stuff that overrides the melpa packages. This file is not in git.
  My custom-paths is something of the form
  #+include: "../elisp/custom-paths.el" src emacs-lisp
  It's loaded early so that the load-path is correct prior to package loading.
  #+begin_src emacs-lisp
    ;; don't complain if custom-paths.el doesn't exist
    (require 'custom-paths nil t)
  #+end_src
* Emacs daemon & startup
  :PROPERTIES:
  :CUSTOM_ID: emacs-daemon
  :END:
  #+begin_src emacs-lisp

    ;; start emacs-server if not running
    (unless(daemonp)
      (add-hook 'after-init-hook (lambda ()
                                   (require 'server)
                                   (unless (server-running-p)
                                     (message "Starting EmacsServer from init as not already running.")
                                     (server-start)))))

    (defun startHook()
      ;;(desktop-save-mode 1)
      ;;(desktop-read)

      (global-set-key (kbd "S-<f1>") 'describe-face)) ;

    (add-hook 'emacs-startup-hook 'startHook)

    (defun quit-or-close-emacs(&optional kill)
      (interactive)
      (if (or current-prefix-arg kill)
          (server-shutdown)
        (delete-frame)))

    (defun server-shutdown ()
      "Save buffers, Quit, and Shutdown (kill) server"
      (interactive)
      (save-some-buffers)
      (kill-emacs))

    (global-set-key (kbd "C-c x") 'quit-or-close-emacs)
    (global-set-key (kbd "C-x C-c") 'nil)
  #+end_src
* Music
  [[https://github.com/dbrock/bongo][Bongo]] is a flexible and usable media player for GNU Emacs.  If you
  store your music collection locally and use structured file names,
  then Bongo is a great way for you to play music from within Emacs.
  #+begin_src emacs-lisp
    (use-package bongo :ensure t)
  #+end_src

* Utility functions
  :PROPERTIES:
  :CUSTOM_ID: utility-functions
  :END:

** toggle buffer
   #+begin_src emacs-lisp
     (defun rgr/toggle-buffer
         (&optional
          n)
       "jump to or from buffer named n else default to *Messages*"
       (interactive)
       (let ((n (or n
                    "*Messages*")))
         (switch-to-buffer (if (string= (buffer-name) n)
                               (other-buffer) n))))
   #+end_src
** scratch
   #+begin_src emacs-lisp
     (defun generate-setq-form-function (variable value)
       `(setq ,variable ',(sort (delete-dups (copy-tree value)) #'(lambda (x y)
                                                                    (string< (symbol-name x)
                                                                             (symbol-name y))))))

     ;; (setq x 3)
     ;; (generate-setq-form-function x '(b e c f a))
   #+end_src
** external utilities
***
    [[https://www.emacswiki.org/emacs/download/help-fns%2b.el][help-fns+]] from Drew Adams
    #+begin_verse
 ;;; Commentary:
 ;;
 ;;    Extensions to `help-fns.el'.  Also includes a redefinition of
 ;;    `describe-face', which is from `faces.el'.
 ;;
 ;;    Note: As of Emacs 24.4, byte-compiling this file in one Emacs
 ;;    version and using the compiled file in another Emacs version
 ;;    does not work.
 ;;
 ;;
 ;;  Keys bound here:
 ;;
 ;;    `C-h B'      `describe-buffer'
 ;;    `C-h c'      `describe-command'     (replaces `describe-key-briefly')
 ;;    `C-h o'      `describe-option'
 ;;    `C-h C-c'    `describe-key-briefly' (replaces `C-h c')
 ;;    `C-h C-o'    `describe-option-of-type'
 ;;    `C-h M-c'    `describe-copying'     (replaces `C-h C-c')
 ;;    `C-h M-f'    `describe-file'
 ;;    `C-h M-k'    `describe-keymap'
 ;;    `C-h M-l'    `find-function-on-key'
    #+end_verse

    #+begin_src emacs-lisp
      (use-package help-fns+
        :disabled t
        )
    #+end_src

*** helpful
    [[https://github.com/Wilfred/helpful][Helpful]] is an alternative to the built-in Emacs help that provides much more contextual information.
    #+begin_src emacs-lisp
      (use-package helpful

        :config
        (global-set-key (kbd "C-h f") #'helpful-callable)

        (global-set-key (kbd "C-h v") #'helpful-variable)
        (global-set-key (kbd "C-h k") #'helpful-key)
        ;; Lookup the current symbol at point. C-c C-d is a common keybinding
        ;; for this in lisp modes.
        (global-set-key (kbd "C-c C-d") #'helpful-at-point)

        ;; Look up *F*unctions (excludes macros).
        ;;
        ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
        ;; already links to the manual, if a function is referenced there.
        (global-set-key (kbd "C-h F") #'helpful-function)

        ;; Look up *C*ommands.
        ;;
        ;; By default, C-h C is bound to describe `describe-coding-system'. I
        ;; don't find this very useful, but it's frequently useful to only
        ;; look at interactive functions.
        (global-set-key (kbd "C-h C") #'helpful-command)
        )
    #+end_src

* Configure main look and feel
  :PROPERTIES:
  :CUSTOM_ID: look-and-feel
  :END:
** General

   #+begin_src emacs-lisp

          ;; (set-language-environment 'utf-8)
          ;; (setq default-process-coding-system '(utf-8 . utf-8)) ;; needed this for calling call-process-shell-command
          (require 'iso-transl) ;; supposed to cure deadkeys when my external kbd is plugged into my thinkpad T460.  It doesnt.

          (scroll-bar-mode -1)
          (tool-bar-mode -1)
          (menu-bar-mode -1)
          (show-paren-mode 1)
          (tooltip-mode 1)
          (display-time-mode 1)

          (global-visual-line-mode 1)

          (delete-selection-mode 1)

          (save-place-mode 1)
          (savehist-mode 1)

          (global-set-key (kbd "S-<f10>") #'menu-bar-open)
;          (global-set-key (kbd "<f10>") #'imenu)


          (setq frame-title-format (if (member "-chat" command-line-args)  "Chat: %b" "Emacs: %b")) ;; used to select the window again (frame-list) (selected-frame)

          (defalias 'yes-or-no-p 'y-or-n-p)

          ;; Auto refresh buffers
          (global-auto-revert-mode 1)

          ;; Also auto refresh dired, but be quiet about it
          (setq global-auto-revert-non-file-buffers t)
          (setq auto-revert-verbose nil)

     (use-package boxquote :straight (:type git :host "https://github.com/"
     :repo "/davep/boxquote.el"))
          ;; (use-package boxquote
          ;;   :bind
          ;;   ("C-S-r" . boxquote-region))

          (use-package
            browse-url-dwim)

          (use-package
            all-the-icons)

          (use-package
            webpaste
            :bind ("C-c y" . webpaste-paste-region)
            ("C-c Y" . webpaste-paste-buffer))

          ;; brings visual feedback to some operations by highlighting portions relating to the operations.
          (use-package
            volatile-highlights
            :init (volatile-highlights-mode 1))
          ;; display dir name when core name clashes
          (require 'uniquify)

          (global-set-key (kbd "C-c r") 'query-replace-regexp)

   #+end_src
** Clipboard
   Allow terminal emacs to interact with the x clipboard.
   #+begin_src emacs-lisp
     (use-package xclip
       :demand t
       :config
       (xclip-mode))
   #+end_src
** Ansi colour
   [[https://www.emacswiki.org/emacs/AnsiColor][Ansi colour hooks]] to enable emacs buffers to handle ansi.
   #+begin_src emacs-lisp
     (require 'ansi-color)
     (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
     (add-to-list 'comint-output-filter-functions 'ansi-color-process-output)
   #+end_src
** Point History
   #+begin_src emacs-lisp
     (require 'pointhistory)
   #+end_src
* Shells
  :PROPERTIES:
  :CUSTOM_ID: shells
  :END:
** Shell Switcher
   [[https://github.com/DamienCassou/shell-switcher][shell-switcher]] allows easier shell switching.

   #+begin_src emacs-lisp
     (use-package
       shell-switcher
       :config (setq shell-switcher-mode t)
       ;;(add-hook 'eshell-mode-hook 'shell-switcher-manually-register-shell)
       :bind ("<f12>" . projectile-run-eshell)
       ("M-<f12>" . shell-switcher-switch-buffer)
       ("C-<f12>" . shell-switcher-new-shell))
   #+end_src

** Eshell
   [[https://www.masteringemacs.org/article/complete-guide-mastering-eshell][EShell]] is, amongst other things,  convenient for cat/console debugging in Symfony etc to have all output in easily browsed Emacs buffers via [[https://www.emacswiki.org/emacs/EshellRedirection][EShell redirection]].
*** Eshell functions
**** Bootstrap  clean emacs
     #+begin_src emacs-lisp
       (defun eshell/emacs-clean (&rest args)
         "run a clean emacs"
         (interactive)
         (save-window-excursion
           (shell-command "emacs -Q -l ~/.emacs.d/straight/repos/straight.el/bootstrap.el &")))
     #+end_src
*** EShell Aliases
    Be sure to check out [[http://www.howardism.org/Technical/Emacs/eshell.html][Aliases]]. Aliases are very powerful allowing you to mix up shell script, elisp raw and elisp library function. My current [[file+sys:eshell/alias][alias file]] (subject to change...) is currently, at this time of discovery:-

    #+include: "~/.emacs.d/eshell/alias" src bash

*** EShell config with Helm
***** TODO Tasks                                          :tasklist:
      :LOGBOOK:
      - State "TODO"       from              [2020-02-13 Thu 01:10]
      :END:
****** CANCELLED look at putting arrow keys back on and determining why helm-eshell-history didnt work with them on :xx:CANCELLED:
       CLOSED: [2020-02-27 Do 07:20] SCHEDULED: <2020-02-15 Sat>
       :LOGBOOK:
       - State "CANCELLED"  from "TODO"       [2020-02-27 Do 07:20] \\
         forget it
       - State "TODO"       from              [2020-02-13 Thu 00:43]
       :END:
***** This setup uses the so called "plan 9" pattern documented [[https://www.masteringemacs.org/article/complete-guide-mastering-eshell][here]].

      #+begin_quote
      If smart display is enabled it will also let you review the output of long-running commands by using SPC to move down a page and BACKSPACE to move up a page. If any other key is pressed it will jump the end of the buffer, essentially acting in the same way as if smart display wasn’t enabled.

      Essentially, if Eshell detects that you want to review the last executed command, it will help you do so; if, on the other hand, you do not then Eshell will jump to the end of the buffer instead. It’s pretty clever about it, and there are switches you can toggle to fine-tune the behavior.
      #+end_quote

      Added in some pcomplete extensions for git from [[https://www.masteringemacs.org/article/pcomplete-context-sensitive-completion-emacs][Mastering Emacs]].

      #+begin_src emacs-lisp
        (use-package
          eshell
          :init
          (require 'em-hist)
          (require 'em-tramp)
          (require 'em-smart)
          :config
          (defun eshell-mode-hook-func ()
            (setq eshell-path-env (concat "/home/rgr/bin:" eshell-path-env))
            (setenv "PATH" (concat "/home/rgr/bin:" (getenv "PATH")))
             (setq pcomplete-cycle-completions nil))
          (add-hook 'eshell-mode-hook 'eshell-mode-hook-func)
          (setq eshell-review-quick-commands nil)
          (setq eshell-smart-space-goes-to-end t)
          (use-package pcomplete-extension
            :config
            (defconst pcmpl-git-commands
              '("add" "bisect" "branch" "checkout" "clone"
                "commit" "diff" "fetch" "grep"
                "init" "log" "merge" "mv" "pull" "push" "rebase"
                "reset" "rm" "show" "status" "tag" )
              "List of `git' commands")

            (defvar pcmpl-git-ref-list-cmd "git for-each-ref refs/ --format='%(refname)'"
              "The `git' command to run to get a list of refs")

            (defun pcmpl-git-get-refs (type)
              "Return a list of `git' refs filtered by TYPE"
              (with-temp-buffer
                (insert (shell-command-to-string pcmpl-git-ref-list-cmd))
                (goto-char (point-min))
                (let ((ref-list))
                  (while (re-search-forward (concat "^refs/" type "/\\(.+\\)$") nil t)
                    (add-to-list 'ref-list (match-string 1)))
                  ref-list)))

            (defun pcomplete/git ()
              "Completion for `git'"
              ;; Completion for the command argument.
              (pcomplete-here* pcmpl-git-commands)
              ;; complete files/dirs forever if the command is `add' or `rm'
              (cond
               ((pcomplete-match (regexp-opt '("add" "rm")) 1)
                (while (pcomplete-here (pcomplete-entries))))
               ;; provide branch completion for the command `checkout'.
               ((pcomplete-match "checkout" 1)
                (pcomplete-here* (pcmpl-git-get-refs "heads")))))    )
          (use-package
            eshell-git-prompt
            :config
            (eshell-git-prompt-use-theme 'powerline)
            (define-advice
                eshell-git-prompt-powerline-dir
                (:override ()
                           short)
              "Show only last directory."
              (file-name-nondirectory (directory-file-name default-directory))))
          :bind (:map eshell-mode-map
                      ;; ([remap eshell-previous-matching-input-from-input] . previous-line)
                      ;; ([remap eshell-next-matching-input-from-input] . next-line)
                      ;;([remap eshell-list-history] . helm-eshell-history)
                      ("C-r" . helm-eshell-history)))
      #+end_src
** Docker
*** tasks                                                 :tasklist:
**** DONE docker-tramp: work out how the hell to do this
     CLOSED: [2020-03-22 So 01:34] SCHEDULED: <2020-03-24 Di>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2020-03-22 So 01:34]
     - State "TODO"       from              [2020-03-22 So 01:30]
     :END:
*** docker
    A general interface to [[https://github.com/Silex/docker.el/tree/a2092b3b170214587127b6c05f386504cae6981b][docker]].
    #+begin_src emacs-lisp
      (use-package docker
        :ensure t
        :after projectile
        :bind (:map projectile-mode-map ("C-c k" . docker)))
    #+end_src
* Helm, helm-mode
  :PROPERTIES:
  :CUSTOM_ID: helm-management
  :END:
  Incremental completion/searching and all sorts of wonderful things. [[https://github.com/emacs-helm/helm][Emacs Incremental Completion.]]
  #+begin_src emacs-lisp
    (use-package
      helm
      :custom
      (helm-buffer-max-length 64)
      (helm-candidate-numer 50 t)
      (helm-ff-auto-update-initial-value t)
      ;; (helm-grep-default-command "grep --color=always -a -i -d skip %e -n%cH -e %p %f")
      ;; (helm-grep-default-recurse-command "grep --color=always -i -a -d recurse %e -n%cH -e %p %f")
      ;; (helm-grep-git-grep-command "git --no-pager grep -n%cH --full-name -e %p -- %f")
      (helm-split-window-inside-p t)
      (helm-swoop-move-to-line-cycle t)
      (helm-ff-search-library-in-sexp t)
      (helm-ff-file-name-history-use-recentf t)
      (helm-echo-input-in-header-line t)
      (helm-truncate-lines t)
      (helm-turn-on-recentf t) ;; doesnt work
      ;;      (helm-show-completion-display-function #'helm-show-completion-default-display-function) ; stop using popup frame
      (helm-show-completion-display-function nil) ; stop using popup frame
      :config
      (helm-mode 1)
      ;;(helm-autoresize-mode 1)
      (helm-popup-tip-mode 1)
      (use-package
        helm-ag)
      (use-package
        helm-rg)
      (use-package
        helm-git-grep)
      (use-package
        google-translate)
      (use-package
        helm-swoop
        :config
        (setq helm-swoop-pre-input-function (lambda () "")))
      (use-package
        helm-chrome)
      (use-package
        helm-dictionary)
      (require 'helm-config)
      (global-unset-key (kbd "C-x c"))
      (when (executable-find "curl")
        (setq helm-google-suggest-use-curl-p t))

      :bind ("C-c h" . helm-command-prefix)
      ("M-x" . helm-M-x)
      ("C-x b" . helm-mini)
      ("C-s" . helm-swoop)
      ("C-x C-f". helm-find-files)
      ("M-p". helm-show-kill-ring)
      ("C-h SPC" . helm-all-mark-rings)
      ("C-h C-SPC" . helm-global-mark-ring)
      (:map helm-map
            ("C-z" . helm-execute-persistent-action))
      (:map helm-command-map
            (("@" . straight-use-package)
             ("d" . helm-dictionary)
             ("r" . helm-resume)
             ("e" . helm-info-elisp)
             ("g" . helm-google-suggest)
             ("B". helm-chrome-bookmarks)
             ("p". helm-top)
             ("t". google-translate-at-point)
             ("T". google-translate-query-translate)
             ("b". helm-bookmarks)
             ("u". browse-url-dwim)
             ("o" . helm-multi-swoop))))
  #+end_src
* Projectile
  :PROPERTIES:
  :CUSTOM_ID: projectile-project-management
  :END:
  :LOGBOOK:
  - State "TODO"       from              [2020-02-25 Tue 19:51]
  :END:
  [[https://github.com/bbatsov/projectile][Projectile]] is all about being "project aware". Find files, grep and similar are aware of your [[https://projectile.readthedocs.io/en/latest/configuration/][project root]] making such tasks project local. Can't do without it.

  #+begin_src emacs-lisp
    (use-package
      helm-projectile
      :demand
      :custom
      (helm-ag-insert-at-point 'symbol)
      :config
      (use-package helm-ag)
      (defun my-projectile-grep(&optional deepsearch)
        (interactive "P")
        ;; (let((helm-rg--extra-args (if deepsearch "--no-ignore-vcs" nil)))
        ;;   (helm-projectile-rg)))
      (let((helm-ag--extra-options (if deepsearch "-U" nil)))
        (helm-projectile-ag helm-ag--extra-options)))
      (defun my-projectile-find-file(search)
        (interactive "P")
        (if search
            (projectile-find-file)
          (projectile-find-file-dwim)))
      (helm-projectile-on)
      (projectile-mode 1)
      :bind ("<f2>" . 'projectile-dired)
      ("S-<f3>" . 'helm-do-grep-ag)
      ("<f3>" . 'my-projectile-grep)
      ("<f4>" . 'my-projectile-find-file)
      ("<f5>" . 'helm-projectile-switch-to-buffer)
      (:map projectile-mode-map ("C-c p" . projectile-command-map))
      (:map projectile-command-map ("o"  . helm-multi-swoop-projectile))
      (:map projectile-command-map ("g"  . helm-git-grep)))

  #+end_src

  #+RESULTS:

* Buffers and Windows
  :PROPERTIES:
  :CUSTOM_ID: buffers-and-windows
  :END:
** General
   #+begin_src emacs-lisp
     (winner-mode 1)
     (recentf-mode 1)
     (global-set-key (kbd "C-<f2>") 'rgr/toggle-buffer)
     (global-set-key (kbd "C-h d") (lambda()(interactive)(apropos-documentation (symbol-or-region-at-point-as-string-or-prompt))))
     (defun kill-next-window ()
       "If there are multiple windows, then close the other pane and kill the buffer in it also."
       (interactive)
       (if (not (one-window-p))(progn
                                 (other-window 1)
                                 (kill-this-buffer))
         (message "no next window to kill!")))
     (global-set-key (kbd "C-x k") 'kill-this-buffer)
     (global-set-key (kbd "C-x K") 'kill-next-window)
     (defun rgr/switch-to-buffer-list (buffer alist)
       (message "in rgr/switch-to-buffer-list")
       (select-window  (display-buffer-use-some-window buffer alist)))
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+end_src
** Auto edit buffer as root
   A [[https://github.com/ncaq/auto-sudoedit][package]] that automatically reopens files with sudo.
   #+begin_src emacs-lisp
     (use-package auto-sudoedit
       :demand t
       :config
       (auto-sudoedit-mode 1))

   #+end_src
** iBuffer
   [[https://www.emacswiki.org/emacs/IbufferMode][Ibuffer]] is an advanced replacement for BufferMenu, which lets you operate on buffers much in the same manner as Dired. The most important Ibuffer features are highlighting and various alternate layouts. Ibuffer is part of Emacs since version 22.
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-x C-b") 'ibuffer)
   #+end_src
** dired - emacs file management
*** Dired Git Info
    #+begin_src emacs-lisp
      (use-package dired-git
        :config
        :hook ((dired-mode-hook . dired-git-mode)))
    #+end_src
*** dired hacks
    Collection of useful dired additions found on github [[https://github.com/Fuco1/dired-hacks][here]]. Found out about
    it at the useful emacs resource [[http://pragmaticemacs.com/category/dired/][*Pragmatic Emacs*]].
**** dired subtree
     #+begin_src emacs-lisp
       (use-package dired-subtree
         :config
         (use-package dash)
         :bind (:map dired-mode-map
                     ("i" . dired-subtree-insert)
                     (";" . dired-subtree-remove)))
     #+end_src
**** dired filter
     More dired based filtering see [[help:dired-filter-prefix][dired-filter-prefix]]
     #+begin_src emacs-lisp
       (use-package dired-filter
         :config
         (use-package dash)
         )
     #+end_src
**** dired quicksort
     Dired sorting popup options from [[http://pragmaticemacs.com/emacs/speedy-sorting-in-dired-with-dired-quick-sort/][Pragmatic Emacs]].
     EDIT: cant clone from gitlab
     #+begin_src emacs-lisp
       (use-package dired-quick-sort
         :disabled t
         :ensure t
         :config
         (dired-quick-sort-setup))
     #+end_src
** PosFrame
   Pop a [[https://melpa.org/#/posframe][posframe]] (just a frame) at pointPop a posframe (just a frame) at point
   #+begin_src emacs-lisp
     (use-package posframe)
   #+end_src
** PopWin,Popwin makes you free from the hell of annoying buffers such like *Help*, *Completions*, *compilation*, and etc.
   #+begin_src emacs-lisp
     (use-package popwin
       :init (popwin-mode 1))
   #+end_src
** Transpose windows, transpose-frame
   #+begin_src emacs-lisp
     (use-package transpose-frame
       :config
       (defun window-split-toggle ()
         "Toggle between horizontal and vertical split with two windows."
         (interactive)
         (if (> (length (window-list)) 2)
             (error "Can't toggle with more than 2 windows!")
           (let ((func (if (window-full-height-p)
                           #'split-window-vertically
                         #'split-window-horizontally)))
             (delete-other-windows)
             (funcall func)
             (save-selected-window
               (other-window 1)
               (switch-to-buffer (other-buffer))))))
       :bind
       ("C-M-t" . transpose-frame)
       ("C-c T" . window-split-toggle)
       )
   #+end_src
** Hyperbole
   [[https://www.emacswiki.org/emacs/Hyperbole][Hyperbole]] is more a window management system from what I can see. Need to explore it.

   #+begin_src emacs-lisp
     (use-package
       hyperbole
       :disabled t)
   #+end_src

** Undo utilities
*** undohist
    [[https://melpa.org/#/undohist][undo-hist]] provides persistent undo across sessions.
    #+begin_src emacs-lisp
      (use-package undohist
        :disabled t
        :config
        (undohist-initialize))
    #+end_src
*** undo-tree
    [[https://github.com/apchamberlain/undo-tree.el][undo-tree]] visualises the sometimes complex undo ring and allow stepping along the timeline
    #+begin_src emacs-lisp
      (use-package undo-tree
        :disabled t
        :config
        (global-undo-tree-mode))
    #+end_src
*** undo-fu
    #+begin_src emacs-lisp
      (use-package undo-fu
        :disabled t
        :init
        (global-unset-key (kbd "C-z"))
        (global-set-key (kbd "C-z")   'undo-fu-only-undo)
        (global-set-key (kbd "C-S-z") 'undo-fu-only-redo))
    #+end_src
** Navigation
*** Back Button
    [[https://github.com/rolandwalker/back-button][Back-Button]] provides better navigation on the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Mark-Ring.html][local and global mark rings]]. The jury is still out on this one.
    #+begin_src emacs-lisp
      (use-package back-button
        :config
        (back-button-mode 1)
        :bind
        ("M-<left>" . previous-buffer)
        ("M-<right>" . next-buffer))
    #+end_src
*** Window hopping
    [[https://github.com/abo-abo/ace-window][Ace-Window]] provides better window switching.
    #+begin_src emacs-lisp
      (use-package ace-window
        :bind*
        ("C-x o" . ace-window)
        ("C-x O" . ace-delete-window))
    #+end_src
*** hopping around links
    Quickly follow [[https://github.com/abo-abo/ace-link][links]] in Emacs.
    #+begin_src emacs-lisp
      (use-package ace-link
        :demand t
        :config
        (ace-link-setup-default)
        :bind*
        (:map emacs-lisp-mode-map
              ("C-c o" . ace-link-addr))
        ("C-c o" . ace-link)
        )
    #+end_src
*** hopping around in the buffer
    Allows word, char and line hopping. The [[https://github.com/winterTTr/ace-jump-mode/wiki][wiki]] is a food source of info.
    #+begin_src emacs-lisp
      (use-package ace-jump-mode
        :bind
        ("C-c j" . ace-jump-mode)
        )
    #+end_src
** Elscreen
   [[https://github.com/knu/elscreen][Elscreen]] provides tabs in Emacs.
   #+begin_src emacs-lisp
     (use-package
       elscreen
       :disabled t
       :config (elscreen-start))
   #+end_src
* Centaur Tabs
  [[https://github.com/ema2159/centaur-tabs][Centaur Tabs]] is an aesthetic, functional and efficient tabs plugin for Emacs.
  #+begin_src emacs-lisp
    (use-package centaur-tabs
      :disabled
      :demand
      :init
      (setq centaur-tabs-enable-key-bindings t)
      :custom
      (centaur-tabs-height 32)
      (centaur-tabs-style "alternate")
      (centaur-tabs-set-icons t)
      (centaur-tabs-gray-out-icons 'buffer)
      (centaur-tabs-set-bar 'over)
      (centaur-tabs-set-modified-marker t)
      (centaur-tabs-cycle-scope 'default)
      :config
      (centaur-tabs-mode t)
      (centaur-tabs-headline-match)
      (centaur-tabs-group-by-projectile-project)
      (defun centaur-tabs-buffer-groups ()
          "`centaur-tabs-buffer-groups' control buffers' group rules.

        Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
        All buffer name start with * will group to \"Emacs\".
        Other buffer group by `centaur-tabs-get-group-name' with project name."
          (list
            (cond
             ((or (string-equal "*" (substring (buffer-name) 0 1))
                  (memq major-mode '(magit-process-mode
                                     magit-status-mode
                                     magit-diff-mode
                                     magit-log-mode
                                     magit-file-mode
                                     magit-blob-mode
                                     magit-blame-mode
                                     )))
              "Emacs")
             ((derived-mode-p 'prog-mode)
              "Editing")
             ((derived-mode-p 'dired-mode)
              "Dired")
             ((memq major-mode '(helpful-mode
                                 help-mode))
              "Help")
             ((memq major-mode '(org-mode
                                 org-agenda-clockreport-mode
                                 org-src-mode
                                 org-agenda-mode
                                 org-beamer-mode
                                 org-indent-mode
                                 org-bullets-mode
                                 org-cdlatex-mode
                                 org-agenda-log-mode
                                 diary-mode))
              "OrgMode")
             (t
              (centaur-tabs-get-group-name (current-buffer))))))

      :hook
      (dired-mode . centaur-tabs-local-mode)
      :bind
      ("C-x B" . centaur-tabs-switch-group)
      ("C-<prior>" . centaur-tabs-backward)
      ("C-<next>" . centaur-tabs-forward))
  #+end_src
** Darkroom
   [[https://github.com/joaotavora/darkroom][Darkroom]] provides distraction-free editing. Surprisingly nice, especially if someone is leaning over your and you want to point something out.
   #+begin_src emacs-lisp
     (use-package
       darkroom
       :config (define-globalized-minor-mode my-global-darkroom-mode darkroom-tentative-mode
                 (lambda ()
                   (darkroom-tentative-mode 1)))
       :bind ("<f7>" . 'darkroom-tentative-mode))
   #+end_src
** Outline Mode
   [[https://github.com/alphapapa/outshine][Outshine]] attempts to bring the look and feel of Org Mode to the world outside of the Org major-mode. It’s an extension of outline-minor-mode that should act as a replacement of Outline Mode. Just change all your calls to outline-minor-mode into outshine-mode.
   #+begin_src emacs-lisp
     (use-package outshine :disabled t)
   #+end_src
* Text tools
  :PROPERTIES:
  :CUSTOM_ID: text-tools
  :END:
** Cursor/Region related
*** General
    #+begin_src emacs-lisp
      (defun centreCursorLineOn()
        "set properties to keep current line approx at centre of screen height. Useful for debugging."
        ;; a faster more concise alternative to MELPA's centered-cursor-mode
        (interactive)
        (setq  scroll-preserve-screen-position_t scroll-preserve-screen-position scroll-conservatively_t
               scroll-conservatively maximum-scroll-margin_t maximum-scroll-margin scroll-margin_t
               scroll-margin)
        (setq scroll-preserve-screen-position t scroll-conservatively 0 maximum-scroll-margin 0.5
              scroll-margin 99999))

      (defun centreCursorLineOff()
        (interactive)
        (setq  scroll-preserve-screen-position scroll-preserve-screen-position_t scroll-conservatively
               scroll-conservatively_t maximum-scroll-margin maximum-scroll-margin_t scroll-margin
               scroll-margin_t))

    #+end_src
*** expand-region
    [[https://github.com/magnars/expand-region.el][expand-region]] is an Emacs extension to increase selected region by semantic units.

    #+begin_src emacs-lisp
      (use-package
        expand-region
        :config (defun er/select-call-f(arg)
                  (setq current-prefix-arg arg)
                  (call-interactively 'er/expand-region)
                  (exchange-point-and-mark))
        (defun selectFunctionCall()
          (interactive)
          (er/select-call-f 3))
        :bind ("<C-return>" . selectFunctionCall)
        ("C-c e" . er/expand-region)
        ("C-c c" . er/contract-region))
    #+end_src
*** easy-kill
    [[https://github.com/leoliu/easy-kill][easy-kill]] enables you to kill & Mark Things Easily in Emacs
    #+begin_src emacs-lisp
      (use-package easy-kill
        :config
        (global-set-key [remap kill-ring-save] 'easy-kill))
    #+end_src
** Folding/Hide Show
    [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Hideshow.html][hs-minor-mode]] allows hiding and showing different blocks of text/code (folding).
   #+begin_src emacs-lisp
     (add-hook 'prog-mode-hook (lambda()(hs-minor-mode t)))
   #+end_src

   #+end_src
** flyspell
   #+begin_src emacs-lisp
     (use-package flyspell
       :config
       (defun flyspell-check-next-highlighted-word ()
         "Custom function to spell check next highlighted word"
         (interactive)
         (flyspell-goto-next-error)
         (ispell-word)
         )
       :bind (("C-<f8>" . flyspell-mode)
             ("C-S-<f8>" . flyspell-buffer)
             ("<f8>" . flyspell-check-next-highlighted-word)
             ("S-<f8>" . flyspell-check-previous-highlighted-word)
             ))
   #+end_src
** Completion
*** Snippets with yasnippet
    #+begin_src emacs-lisp
      (use-package
        yasnippet
        :init (yas-global-mode 1)
        :config

        (use-package
          php-auto-yasnippets)
        (use-package
          yasnippet-snippets)
        (use-package
          yasnippet-classic-snippets))
    #+end_src

*** Company Mode
    [[https://github.com/sebastiencs/company-box][company-box]] provides nice linked help on the highlighted completions when available.

    #+CAPTION: company-box in action for php/lsp mode.
    [[./images/company-box.png]]

    #+begin_src emacs-lisp
      (use-package
        company
        :demand t
        :config
        ;; (setq company-backends
        ;;       '((company-capf :with company-dabbrev-code :separate)
        ;;         (company-files :with company-dabbrev-code)
        ;;         (company-nxml company-dabbrev-code company-keywords :with company-yasnippet)
        ;;         (company-oddmuse :with company-yasnippet)
        ;;         (company-dabbrev :with company-yasnippet)))
        (use-package
          company-box
          :disabled
          :hook (company-mode . company-box-mode))
        (require 'company-ispell)
        (global-company-mode)
        :bind ("C-<tab>" . company-complete))
    #+end_src
*** Which Key
    [[https://github.com/justbur/emacs-which-key][which-key]] shows you what further key options you have if you pause on a multi key command.
    #+begin_src emacs-lisp
      (use-package
        which-key
        :demand t
        :config (which-key-mode))
    #+end_src
*** Tying it call together
    #+begin_src emacs-lisp
      (defun check-expansion ()
        (save-excursion (if (looking-at "\\_>") t (backward-char 1)
                            (if (looking-at "\\.") t (backward-char 1)
                                (if (looking-at "->") t nil)))))

      (defun do-yas-expand ()
        (let ((yas-fallback-behavior 'return-nil))
          (yas-expand)))

      (defun tab-indent-or-complete ()
        (interactive)
        (if (minibufferp)
            (minibuffer-complete)
          (if (or (not yas-minor-mode)
                  (null (do-yas-expand)))
              (if (check-expansion)
                  (company-complete-common)
                (yas/create-php-snippet)))))
      ;;              (indent-for-tab-command)))))
    #+end_src
** Searching non-helm
   #+begin_src emacs-lisp
     (use-package ag)
   #+end_src
** Abbrev Mode
   [[https://www.emacswiki.org/emacs/AbbrevMode#toc4][Abbrev Mode]] is very useful for expanding small text snippets
   #+begin_src emacs-lisp
     (setq-default abbrev-mode t)

   #+end_src
** Deft - text searching
   [[https://jblevins.org/projects/deft/][Deft]] is an Emacs mode for quickly browsing, filtering, and editing directories of plain text notes, inspired by Notational Velocity. It was designed for increased productivity when writing and taking notes by making it fast and simple to find the right file at the right time and by automating many of the usual tasks such as creating new files and saving files.
   #+begin_src emacs-lisp
     (use-package deft
       :config
       (setq deft-directory (expand-file-name "orgfiles" user-emacs-directory))
       (setq deft-recursive t))

   #+end_src
** Google This
   #+name:google-this
   [[https://melpa.org/#/google-this][google-this]] includes an interface to [[https://translate.google.com/][google translate]].
   #+begin_src emacs-lisp
     (use-package
       google-this
       :config
       (google-this-mode 1)
       :bind ("C-c G" . google-this-search))
   #+end_src
** Reference and dictionary

   The aim here is to link to different reference sources and have a sensible default for different modes. eg elisp mode would use internal doc sources, whereas javascript uses Dash/Zeal or even a straight URL search  to lookup help. On top of that provide a list of other sources you can call by prefixing the core lookup-reference-dwim call. But if you lookup internal docs and it doesnt exist then why not farm it out to something like Goldendict which you can configure to look wherever you want? Examples here show Goldendict plugged into google translate amonst other things. The world's your oyster.

*** utility funcs
    #+begin_src emacs-lisp

            (defgroup rgr/lookup-reference nil
              "Define functions to be used for lookup"
              :group 'rgr)

            (defcustom mode-lookup-reference-functions-alist '(
                                                               (nil (goldendict-dwim goldendict-dwim))
                                                               (c++-mode  (my-lsp-ui-doc-glance my-dash))
                                                               (gdscript-mode  (my-lsp-ui-doc-glance my-dash))
      ;;                                                         (gdscript-mode  (my-gdscript-docs-browse-symbol-at-point my-dash))
                                                               (php-mode  (my-lsp-ui-doc-glance my-dash))
                                                               (web-mode  (my-lsp-ui-doc-glance my-devdocs))
                                                               (org-mode (elisp-lookup-reference-dwim))
                                                               (js2-mode (my-dash my-devdocs))
                                                               (js-mode (my-dash my-devdocs))
                                                               (rjsx-mode (my-dash my-devdocs))
                                                               (typescript-mode (my-dash my-devdocs))
                                                               (lisp-interaction-mode (elisp-lookup-reference-dwim my-dash))
                                                               (emacs-lisp-mode (elisp-lookup-reference-dwim my-dash)))
              "mode lookup functions"
              :group 'rgr/lookup-reference)

            (defun get-mode-lookup-reference-functions(&optional m)
              (let* ((m (if m m major-mode))
                     (default-funcs (copy-tree(cadr (assoc nil mode-lookup-reference-functions-alist))))
                     (mode-funcs (cadr (assoc m mode-lookup-reference-functions-alist))))
                (if mode-funcs (progn
                                 (setcar default-funcs (car mode-funcs))
                                 (if (cadr mode-funcs)
                                     (setcdr default-funcs (cdr mode-funcs)))))
                default-funcs)) ;; (get-mode-lookup-reference-functions 'org-mode)

            (defcustom linguee-url-template "https://www.linguee.com/english-german/search?source=auto&query=%S%"
              "linguee url search template"
              :type 'string
              :group 'rgr/lookup-reference)

            (defcustom php-api-url-template "https://www.google.com/search?q=php[%S%]"
              "php api url search template"
              :type 'string
              :group 'rgr/lookup-reference)

            (defcustom jquery-url-template "https://api.jquery.com/?s=%S%"
              "jquery url search template"
              :type 'string
              :group 'rgr/lookup-reference)

            (defcustom  lookup-reference-functions '(my-describe-symbol goldendict-dwim my-linguee-lookup my-dictionary-search my-jquery-lookup google-this-search)
              "list of functions to be called via C-n prefix call to lookup-reference-dwim"
              :type 'hook
              :group 'rgr/lookup-reference)

            (defun sys-browser-lookup(w template)
              (interactive)
              (browse-url-xdg-open (replace-regexp-in-string "%S%" (if w w (symbol-or-region-at-point-as-string-or-prompt)) template)))

            (defun symbol-or-region-at-point-as-string-or-prompt()
              "if a prefix argument (4)(C-u) read from input, else if we have a region select then return that and deselect the region, else try symbol-at-point and finally fallback to input"
              (let* ((w (if (or  (not current-prefix-arg) (not (listp current-prefix-arg)))
                            (if(use-region-p)
                                (let ((sel-text
                                       (buffer-substring-no-properties
                                        (mark)
                                        (point))))
                                  sel-text)
                              (thing-at-point 'symbol)) nil))
                     (result (if w w (read-string "lookup:"))))
                result))

            (defun my-describe-symbol(w)
              (interactive (cons (symbol-or-region-at-point-as-string-or-prompt) nil))
              (let ((s (if (symbolp w) w (intern-soft w))))
                (if s (describe-symbol s)
                  (message "No such symbol: %s" w))))

            (defun my-linguee-lookup(w)
              (interactive (cons (symbol-or-region-at-point-as-string-or-prompt) nil))
              (sys-browser-lookup w linguee-url-template))

            (defun my-php-api-lookup(w)
              (interactive (cons (symbol-or-region-at-point-as-string-or-prompt) nil))
              (let ((dash-docs-docsets '("PHP")))
                (helm-dash w)))
            ;; (sys-browser-lookup w php-api-url-template))

            (defun my-jquery-lookup(&optional w)
              (interactive(cons (symbol-or-region-at-point-as-string-or-prompt) nil))
              (let (;;(zeal-at-point-docset "jQuery")
                    (dash-docs-docsets '("jQuery")))
                (helm-dash w)))
            ;; (interactive (cons (symbol-or-region-at-point-as-string-or-prompt) nil))
            ;; (sys-browser-lookup w jquery-url-template))

            (defun my-gdscript-docs-browse-symbol-at-point(&optional w)
              (gdscript-docs-browse-symbol-at-point))

            (defun lookup-reference-dwim(&optional secondary)
              "if we have a numeric prefix then index into lookup-reference functions"
              (interactive)
              (let((w (symbol-or-region-at-point-as-string-or-prompt))
                   ;; PREFIX integer including 4... eg C-2 lookup-reference-dwim
                   (idx (if (and  current-prefix-arg (not (listp current-prefix-arg)))
                            (- current-prefix-arg 1)
                          nil)))
                (if idx (let((f (nth idx lookup-reference-functions)))
                          (funcall (if f f (car lookup-reference-functions)) w))
                  (let* ((funcs (get-mode-lookup-reference-functions))(p (car funcs))(s (cadr funcs)))
                    (if (not secondary)
                        (unless (funcall p w)
                          (if s (funcall s w)))
                      (if s (funcall s w)))))))

            (defun lookup-reference-dwim-secondary()
              (interactive)
              (lookup-reference-dwim t))

            (bind-key* "C-q" 'lookup-reference-dwim) ;; overrides major mode bindings
            (bind-key* "C-S-q" 'lookup-reference-dwim-secondary)

    #+end_src
*** Dictionary
    The more emacsy [[https://melpa.org/#/dictionary][Dictionary]] .

    #+begin_src emacs-lisp
      (use-package
        dictionary
        :commands (my-dictionary-search)
        :config
        (defun my-dictionary-search(&optional w)
          (interactive)
          (dictionary-search (if w w (symbol-or-region-at-point-as-string-or-prompt))))
        :bind ("<f6>" . my-dictionary-search) )
    #+end_src

*** Elisp reference
**** quick help for function etc at point
     If an elisp object is there it brings up the internal docs:

     #+CAPTION: lookup using internal docs
     [[./images/lookup-internal-doc.png]]


     else it palms it off to goldendict.

     #+CAPTION: lookup using goldendict
     [[./images/lookup-goldendict.png]]

     #+begin_src emacs-lisp
       (defun display-elisp-lookup-reference-popup(sym)
         (interactive)
         (popup+-normal (if (fboundp sym)
                            (popup+-emacs-function sym)
                          (popup+-emacs-variable sym))))

       (defun elisp-lookup-reference-dwim
           (&optional
            w)
         "Checks to see if the 'thing' is known to elisp and, if so, use internal docs else call out to goldendict"
         (interactive)
         (let ((sym (if (symbolp w) w (intern-soft w))))
           (if (and sym
                    (or (fboundp sym)
                        (boundp sym)))
               (display-elisp-lookup-reference-popup sym) nil)))
     #+end_src
**** constant help as you cursor around
     [[https://emacs.stackexchange.com/questions/22132/help-buffer-on-hover-possible][Context elisp help]]
     #+begin_src emacs-lisp
       (define-minor-mode my-contextual-help-mode
         "Show help for the elisp symbol at point in the current *Help* buffer.

       Advises `eldoc-print-current-symbol-info'."
         :lighter " C-h"
         :global t
         (require 'help-mode) ;; for `help-xref-interned'
         (when (eq this-command 'my-contextual-help-mode)
           (message "Contextual help is %s" (if my-contextual-help-mode "on" "off")))
         (and my-contextual-help-mode
              (eldoc-mode 1)
              (if (fboundp 'eldoc-current-symbol)
                  (eldoc-current-symbol)
                (elisp--current-symbol))
              (my-contextual-help :force)))

       (defadvice eldoc-print-current-symbol-info (before my-contextual-help activate)
         "Triggers contextual elisp *Help*. Enabled by `my-contextual-help-mode'."
         (and my-contextual-help-mode
              (derived-mode-p 'emacs-lisp-mode)
              (my-contextual-help)))

       (defvar-local my-contextual-help-last-symbol nil
         ;; Using a buffer-local variable for this means that we can't
         ;; trigger changes to the help buffer simply by switching windows,
         ;; which seems generally preferable to the alternative.
         "The last symbol processed by `my-contextual-help' in this buffer.")

       (defun my-contextual-help (&optional force)
         "Describe function, variable, or face at point, if *Help* buffer is visible."
         (let ((help-visible-p (get-buffer-window (help-buffer))))
           (when (or help-visible-p force)
             (let ((sym (if (fboundp 'eldoc-current-symbol)
                            (eldoc-current-symbol)
                          (elisp--current-symbol))))
               ;; We ignore keyword symbols, as their help is redundant.
               ;; If something else changes the help buffer contents, ensure we
               ;; don't immediately revert back to the current symbol's help.
               (and (not (keywordp sym))
                    (or (not (eq sym my-contextual-help-last-symbol))
                        (and force (not help-visible-p)))
                    (setq my-contextual-help-last-symbol sym)
                    sym
                    (save-selected-window
                      (help-xref-interned sym)))))))

       (defun my-contextual-help-toggle ()
         "Intelligently enable or disable `my-contextual-help-mode'."
         (interactive)
         (if (get-buffer-window (help-buffer))
             (my-contextual-help-mode 'toggle)
           (my-contextual-help-mode 1)))

       (my-contextual-help-mode 1)
     #+end_src
*** GoldenDict - external lookup and reference

    When using goldendict-dwim why not add your program to the wonderful [[http://goldendict.org/][GoldenDict]]? A call to [[https://github.com/soimort/translate-shell][trans-shell]] in the dictionary programs tab gives us google translate:-

    #+begin_src bash
      trans -e google -s de -t en -show-original y -show-original-phonetics n -show-translation y -no-ansi -show-translation-phonetics n -show-prompt-message n -show-languages y -show-original-dictionary n -show-dictionary n -show-alternatives n "%GDWORD%"
    #+end_src

    #+begin_src emacs-lisp
      (use-package
        goldendict
        :commands (goldendict-dwim)
        :config
        (defun goldendict-dwim
            (&optional
             w)
          "lookup word at region, thing at point or prompt for something, in goldendict. Use a prefix to force prompting."
          (interactive)
          (let ((w (if w w (symbol-or-region-at-point-as-string-or-prompt))))
            (call-process-shell-command (format  "goldendict \"%s\"" w ) nil 0)))
        :bind (("C-c g" . goldendict-dwim)))
    #+end_src
*** DevDocs
    #+begin_src emacs-lisp
      (use-package devdocs
        :commands (my-devdocs)
        :config
        (defun my-devdocs (&optional w)
          (interactive)
          (devdocs-search)t)
        :bind* ("C-c v" . 'my-devdocs))
    #+end_src
*** Zeal - Linux Dash
    #+begin_src emacs-lisp
      (use-package zeal-at-point
        :disabled t ;;way too buggy
        :commands (my-zeal)
        :config
        (defun my-zeal (&optional w)
          (interactive)
          (zeal-at-point)t)
        :bind* ("C-c z" . 'my-zeal))
    #+end_src
*** DASH - API documentation for most languages
    Dash packages docs for many languages.
    #+begin_src emacs-lisp
            (use-package
              helm-dash
              :demand t
              :custom
              (dash-docs-common-docsets '("Emacs Lisp" "Docker"))
              (dash-docs-docsets '())
              :config
                 (setq helm-dash-browser-func 'eww-readable-url)
      ;;         (setq helm-dash-browser-func 'eww)
              (defun my-dash (w)
                (interactive (cons (symbol-or-region-at-point-as-string-or-prompt) nil))
                (message "my-dash: %s" w)
                (message "docsets are: " dash-docs-docsets)
                (helm-dash w)t)
              :bind* ("C-c d" . 'my-dash))
    #+end_src
* Treemacs
  :PROPERTIES:
  :CUSTOM_ID: treemacs
  :END:
  Excellent [[https://github.com/Alexander-Miller/treemacs][tree based navigation that works really well with projectile.]]
  #+begin_src emacs-lisp
    (use-package
      treemacs
      :config
      (treemacs-git-mode 'deferred)
      (use-package
        treemacs-projectile)

      (use-package
        treemacs-icons-dired
        :config (treemacs-icons-dired-mode))

      (use-package
        treemacs-magit
        :after treemacs
        magit)
      (defun my-treemacs-select-window (close)
        (interactive "P")
        (if close (treemacs)
          (treemacs-select-window)))
      :bind ("M-0"   . my-treemacs-select-window)
      (:map treemacs-mode-map
            ("<right>" . treemacs-peek)))

  #+end_src

* Alerts
  :PROPERTIES:
  :CUSTOM_ID: alerts
  :END:
  #+begin_src emacs-lisp
    (use-package
      alert
      :commands (alert)
      :custom (alert-default-style 'libnotify))
  #+end_src
* Web
  :PROPERTIES:
  :CUSTOM_ID: web
  :END:
** helper functions
   #+begin_src emacs-lisp
     (defun www-open-current-page-external ()
       "Open the current URL in desktop browser."
       (interactive)
       (let((url (or
                  (if(fboundp 'eww-currentl-url)
                      (eww-current-url)
                    (if(fboundp 'w3m-currentl-url)
                        (w3m-current-url)
                      nil)))))
         (if url
             (browse-url-xdg-open url)
           (message "No buffer url"))))

     (defun www-open-link-external ()
       "Open the current link or image in Firefox."
       (interactive)
       (let((anchor (url-get-url-at-point)))
         (if anchor
             (browse-url-xdg-open anchor)
           (message "No valid anchor found at cursor!"))))
   #+end_src
** W3M - emacs text based web browser
   [[https://github.com/emacs-w3m/emacs-w3m][W3M]] is an in-editor text based web browser. Handy for text based resources, bookmarking etc. Bind a couple of keys to open in the system browser.
   #+begin_src emacs-lisp
     (use-package
       w3m
       :disabled t
       :custom (browse-url-browser-function 'w3m-browse-url)
       :config
       (use-package helm-w3m)
       :bind
       ("C-c o" . 'browse-url)
       (:map w3m-mode-map
             ("O" . www-open-current-page-external)
             ("o" . www-open-link-external)))
   #+end_src
** EWW - emacs text based web browser
   [[https://www.gnu.org/software/emacs/manual/html_mono/eww.html][Emacs-EWW]] is an in-editor text based web browser. Handy for text based resources, bookmarking etc. Bind a couple of keys to open in the system browser.
   Added some functions to [[https://emacs.stackexchange.com/questions/36284/how-to-open-eww-in-readable-mode/47757][open some URLs in 'eww-readable]] so that it skips headers and footers (normally bound to R in eww).
*** open tasks :tangle no
    :PROPERTIES:
    :UNNUMBERED: t
    :END:
**** TODO why doesnt this work anymore
*** code
    #+begin_src emacs-lisp
      (use-package
        eww
        ;:disabled t
        :demand t
        :commands (eww-readable-url)
        :config
        (use-package helm-eww)
        (defun make-eww-readable()
          ;; make current eww buffer eww-readable and then remove the hook that called this so normal buffers are not eww-readable.
          (message "in make-eww-reabable")
          (unwind-protect
              ;;(eww-readable)
            (remove-hook 'eww-after-render-hook #'make-eww-readable)))

        (defun eww-readable-url (url)
          ;; when the eww buffer has rendered call a hook function that implements eww-readable and then removes that hook.
          ;; primarily for 'dash-docs-browser-func
          (interactive "sURL:")
          (add-hook 'eww-after-render-hook #'make-eww-readable)
          (message "eww readable browsing: %s, hook is: %s " url eww-after-render-hook)
          (eww url))
        :bind
        ("C-c o" . 'browse-url)
        ("C-c O" . 'eww-readable-url)
        (:map eww-mode-map
              ("O" . www-open-current-page-external)
              ("o" . www-open-link-external)))
    #+end_src
    :LOGBOOK:
    - State "TODO"       from              [2020-08-18 Di 21:24]
    :END:
* Online Chats
  :PROPERTIES:
  :CUSTOM_ID: online-chats
  :END:
  Add a "-chat" [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Command_002dLine-Arguments.html][command line switch]] to load the [[https://www.gnu.org/software/emacs/manual/html_mono/erc.html][Emacs IRC client]] and other such of choice.
  I created this as I tend to hop in and out of Emacs because of severe "[[https://alhassy.github.io/init/][configuration fever]]".
  You don't want to be hopping in and out of chat groups too. An [[./editor-config/oneemacs-chat][external shell script]] checks for
  the existence of a chat instance (frame name) and switches to it if it exists.
  #+begin_src emacs-lisp
    (defun rgr/load-chats(switch)
      (require  'rgr-chat))
    (add-to-list 'command-switch-alist '("chat" . rgr/load-chats))
  #+end_src

  The code in [[../elisp/rgr-chat.el][rgr-chat.el]]:
  #+include: "../elisp/rgr-chat.el" src emacs-lisp

*** Only one chat instance
    Small external script, [[../editor-config/oneemacs-chat][oneemacs-chat]], to create an erc instance if there isnt already one.

    #+include: "../editor-config/oneemacs-chat" src shell

    and the eshell func to call it:
    #+begin_src emacs-lisp
      (defun eshell/chat-client
          (&rest
           args)
        "run a clean emacs"
        (interactive)
        (save-window-excursion (call-process "oneemacs-chat" nil 0)))

      (global-set-key (kbd "C-c i") 'eshell/chat-client)
    #+end_src

** Slackware
*** Slack secrets                                            :noexport:crypt:
    -----BEGIN PGP MESSAGE-----

    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
    YA9JV65Xe289TTsHPC8aniOinOUb9z5iPQ==
    =AiUK
    -----END PGP MESSAGE-----
*** Emacs Slack
    [[https://slack.com/intl/en-de/][Slack]] interface for Emacs on [[https://github.com/yuya373/emacs-slack][github]]. See [[./lisp/rgr-chat.el][rgr-chat.el]].
*** Emacs Gitter
    [[https://gitter.im/][Gitter]] interface for Emacs on [[https://github.com/xuchunyang/gitter.el][github]]. See [[./lisp/rgr-chat.el][rgr-chat.el]].
* Org functionality
  :PROPERTIES:
  :CUSTOM_ID: org-mode
  :END:
** Org Mode, org-mode
*** config
    :PROPERTIES:
    :Effort:   3:00
    :END:
    :LOGBOOK:
    CLOCK: [2020-02-10 Mon 00:22]--[2020-02-10 Mon 00:23] =>  0:01
    - just a little bit
    :END:

    #+begin_src emacs-lisp
      (use-package org
        :straight org-plus-contrib
        :custom
        (org-directory "~/.emacs.d/orgfiles")
        (org-agenda-files (list org-directory (concat org-directory "/projects" )))
        (org-refile-targets `((,(directory-files-recursively org-directory "^[[:alnum:]].*\\.\\(org\\|gpg\\)\\'") :maxlevel . 9)))
        (org-outline-path-complete-in-steps nil)         ; Refile in a single go
        (org-refile-use-outline-path t)                  ; Show full paths for refiling
        :config
        (require 'org-protocol)
        (require 'org-inlinetask)
        (defun rgr/org-agenda (&optional arg)
          (interactive "P")
          (let ((org-agenda-tag-filter-preset '("-trash")))
            (org-agenda arg "a")))
        :bind
        ("C-c a" . org-agenda)
        ("C-c A" . rgr/org-agenda)
        ("C-c c" . org-capture)
        ("C-c l" . org-store-link)
        ("C-c C-l" . org-insert-link)
        ("C-c C-s" . org-schedule)
        ("C-c t" . org-todo))

      (use-package
        org-bullets
        :config (add-hook 'org-mode-hook (lambda ()
                                           (org-bullets-mode 1)
                                           ;; (org-num-mode 1)
                                           )))

      (org-clock-persistence-insinuate)
      (add-hook 'auto-save-hook 'org-save-all-org-buffers)

      (require 'org-crypt)
      (org-crypt-use-before-save-magic)

      ;; The following lines are always needed.  Choose your own keys.

      (add-hook 'org-mode-hook 'rgr/elisp-helpers)


      (defface org-canceled
        ;; originally copied from font-lock-type-face
        (org-compatible-face nil '((((class color)
                                     (min-colors 16)
                                     (background light))
                                    (:foreground "darkgrey"
                                                 :bold t))
                                   (((class color)
                                     (min-colors 16)
                                     (background dark))
                                    (:foreground "grey"
                                                 :bold t))
                                   (((class color)
                                     (min-colors 8))
                                    (:foreground "grey"))
                                   (t
                                    (:bold t))))
        "Face used for todo keywords that indicate DONE items."
        :group 'org-faces)

      (defface org-wait
        ;; originally copied from font-lock-type-face
        (org-compatible-face nil '((((class color)
                                     (min-colors 16)
                                     (background light))
                                    (:foreground "darkgrey"
                                                 :bold t))
                                   (((class color)
                                     (min-colors 16)
                                     (background dark))
                                    (:foreground "grey"
                                                 :bold t))
                                   (((class color)
                                     (min-colors 8))
                                    (:foreground "grey"))
                                   (t
                                    (:bold t))))
        "Face used for todo keywords that indicate DONE items."
        :group 'org-faces)
    #+end_src
*** Journal, org-journal
    More advanced journalling courtesy of [[https://github.com/bastibe/org-journal][org-journal]].
    #+begin_src emacs-lisp
      (use-package org-journal
        :bind ("C-c J" . org-journal-new-entry)
        :bind ("C-c S" . org-journal-search))
    #+end_src
*** ROAM note taking, org-roam
    #+begin_src emacs-lisp
      (use-package org-roam
        :disabled t
        :after org
        :hook (org-mode . org-roam-mode)
        :straight (:host github :repo "jethrokuan/org-roam")
        :bind
        ("C-c n l" . org-roam)
        ("C-c n t" . org-roam-today)
        ("C-c n f" . org-roam-find-file)
        ("C-c n i" . org-roam-insert)
        ("C-c n g" . org-roam-show-graph))
    #+end_src
*** Authoring in org-mode
    Work in progress. Thread related to this is [[https://www.reddit.com/r/orgmode/comments/6y59r2/using_org_mode_to_write_books/][here]].
*** Passwords, org-password-manager
    #+begin_src emacs-lisp
    (use-package org-password-manager
    :config
    (add-hook 'org-mode-hook 'org-password-manager-key-bindings))
    #+end_src
****   Passwords                                                      :crypt:
-----BEGIN PGP MESSAGE-----

hQEMA7IjL5SkHG4iAQf/RK74iKGuA+IXecpRBGLUY9oNP7pPtVL23UDqdkKqldH8
SCqwTBbR4lmonJN/d44ezTMjJd4tutxTST37FcGRBgGltaKRrBG4KX3h5BC/WDz1
kKX/nnmxzBNQC0lP9l1gIvBUPIgoKUEMhoXtSY6xaNvg6iGNIhQnW4KoQvhvS5KM
TgnlvhlhbFjEcKgR4dOdnAvJDhDGU1ZAB6DPAfraSYICe2qBD1qFyix1hBH+4DYp
CBgqOM+Mx2Jbs0MkJGl8/lmsgbYsssbxD8gjuNwgj3ZIckd6xDZofojjylyPWWBb
DRsNrF1Qqws2g2boI28LhqOV7KxXCxHxZQ3PpjIGedKqAcqJlk8Igo/MLywxf0hJ
H65Vndgdgn4BMJCG/c0KfsvweTRCWataVpuUT8wV34jCCn0U5XSqekCIwHjell0p
cXTmIjm4aqwXjGFc927GQ37Rg/QDRG7EEXLy634+PUuiqtAoKVo9kz9fQcFKFlgv
/Msuyn36n+Miw1sh1tig5DFdwoIilI2ByKyvjP1POIMMDg9me/trlK+MiQVpxiKw
0gVVrLnozFIRo7U=
=R1XD
-----END PGP MESSAGE-----
*** scratchpad                                              :tangle no :noexport:
    :PROPERTIES:
    :TEST:     HELLO WORLD
    :END:
    #+begin_src emacs-lisp
      (defun insert-property(&optional p)
        "insert PROPERTY value of pdftools link"
        (unless p (setq p "TEST"))
        (message "property passed is: %s" p)
        (let ((pvalue
               (save-window-excursion
                 (message "%s" (org-capture-get :original-buffer))
                 (switch-to-buffer (org-capture-get :original-buffer))
                 (org-entry-get (point) p)
                 )))
          pva))
    #+end_src

    #+RESULTS:
    : insert-property
** Self documenting config file
   #+begin_src emacs-lisp

     (use-package ox-gfm
       :defer 3
       :after org
       :config
       (defun config-export-to-markdown()
         (interactive)
         (if (and (eq major-mode 'org-mode) (file-exists-p (concat (file-name-sans-extension (buffer-file-name)) ".md")))
             (org-gfm-export-to-markdown)))

       (add-hook 'after-save-hook 'config-export-to-markdown))

   #+end_src

* Email, gmail, Gnus
  :PROPERTIES:
  :CUSTOM_ID: email
  :END:
  #+begin_src emacs-lisp
    (use-package
      gnus

      :disabled t
      :config

      (setq smtpmail-smtp-server "smtp.gmail.com" smtpmail-smtp-service 587 gnus-ignored-newsgroups
            "^to\\.\\|^[0-9. ]+\\( \\|$\\)\\|^[\"]\"[#'()]")
      (require 'bbdb)
      (require 'bbdb-vcard)
      (bbdb-initialize 'gnus 'message)
      (add-hook 'message-setup-hook 'bbdb-mail-aliases)
      (defun my-gnus-themes()
        (load-theme-buffer-local 'alect-light (current-buffer)))
      (require 'gnus-desktop-notify)
      (gnus-desktop-notify-mode)
      (gnus-demon-add-scanmail)

      (define-key gnus-summary-mode-map (kbd "M-o") 'ace-link-gnus)
      (define-key gnus-article-mode-map (kbd "M-o") 'ace-link-gnus)
      (setq bbdb-use-pop-up nil)
      (use-package
        helm-bbdb)
      :bind	  ("C-c m".  'gnus))
  #+end_src

* Screen recording

** Emacs screencasts
   Package [[https://github.com/tarsius/keycast][keycast]] shows the keys pressed
   #+begin_src emacs-lisp
     (use-package keycast
       )

   #+end_src

* Pomodoro
  :PROPERTIES:
  :CUSTOM_ID: pomodoro
  :END:
  [[https://github.com/TatriX/pomidor][Pomidor]] is a simple and cool pomodoro technique timer.
  #+begin_src emacs-lisp
    (use-package
      pomidor
      :bind (("S-<f7>" . pomidor))
      :custom (pomidor-sound-tick nil)
      (pomidor-sound-tack nil)
      (pomidor-seconds (* 25 60))
      (pomidor-break-seconds (* 5 60))
      :hook (pomidor-mode . (lambda ()
                              (display-line-numbers-mode -1) ; Emacs 26.1+
                              (setq left-fringe-width 0 right-fringe-width 0)
                              (setq left-margin-width 2 right-margin-width 0)
                              ;; force fringe update
                              (set-window-buffer nil (current-buffer)))))
  #+end_src
* Programming related
  :PROPERTIES:
  :CUSTOM_ID: programming
  :END:
** General
   #+begin_src emacs-lisp

     (global-set-key (kbd "S-<f2>") 'linum-mode)
     (add-hook 'prog-mode-hook (lambda() (linum-mode t)))

     (use-package
       smartparens
       :commands (smartparens-mode)
       :config (setq sp-show-pair-from-inside nil)
       (require 'smartparens-config)
       (sp-local-tag '(mhtml-mode html-mode) "b" "<span class=\"bold\">" "</span>")
       (smartparens-global-mode t))

     (unless (fboundp 'prog-mode)
       (defalias 'prog-mode 'fundamental-mode))


   #+end_src
** Symfony
*** custom

    #+begin_src emacs-lisp
      (defgroup rgr/symfony nil
        "Symfony Development"
        :group 'rgr)

      (defcustom symfony-server-command "~/.symfony/bin/symfony server:start"
        "Start the symfony web server"
        :type 'string
        :group 'rgr/symfony)
    #+end_src

*** Start a symfony web server when applicable
    #+begin_src emacs-lisp
      (use-package php-mode
        :config
        (add-to-list 'display-buffer-alist
                     (cons "\\*Symfony Web Server\\*.*" (cons #'display-buffer-no-window nil)))
        (defun start-symfony-web-server()
          (interactive)
          (let ((default-directory (projectile-project-root)))
            (if (and default-directory (file-exists-p "bin/console") (eq (length (shell-command-to-string "pgrep symfony")) 0) (yes-or-no-p "Start web server?"))
                (async-shell-command symfony-server-command "*Symfony Web Server*"))))
        (defun php-mode-webserver-hook ()
          (interactive)
          (start-symfony-web-server)
          ))
      ;;:hook (php-mode . php-mode-webserver-hook))
    #+end_src

    We can trigger it using a .dir-locals.el

    #+begin_src emacs-lisp :tangle no
      ((php-mode
        (eval php-mode-webserver-hook)))
    #+end_src

** Emacs Lisp, ELisp
*** refactoring utlities
    #+begin_src emacs-lisp
      (use-package
        elisp-format
        :bind
        ("C-c f" . elisp-format-region)
        (:map emacs-lisp-mode-map
              ("C-c f" . elisp-format-region)))
    #+end_src
*** query symbol
    #+begin_src emacs-lisp
      (use-package popup+
        :config
        (defun show-symbol-details ()
          (interactive)
          (popup-tip (format "intern-soft thing-at-point: %s, symbolp: %s, symbol-name:%s"
                             (setq-local sym (intern-soft (thing-at-point 'symbol)))
                             (symbolp sym)
                             (symbol-name sym))))
        :bind  ("C-M-S-s" . #'show-symbol-details))
    #+end_src
*** Elisp completion and debugging
    #+begin_src emacs-lisp
      (use-package
        edebug-x
        :demand t
        :init
        (global-set-key (kbd "C-S-<f9>") 'toggle-debug-on-error)
        ;;:custom
        ;;(edebug-trace nil)
        :config
        (require 'edebug)
        (defun instrumentForDebugging()
          (interactive)
          (eval-defun 0))
        (defun instrumentForDebugging()
          "use the universal prefix arg (C-u) to remove instrumentation"
          (interactive)
          (if current-prefix-arg (eval-defun nil) (eval-defun 0)))
        (defun rgr/elisp-helpers()
          ;; Meh, use C-u C-M-x
          ;; (define-key (current-local-map)
          ;;   (kbd "C-<f9>") #'instrumentForDebugging)
          )
        (add-hook 'emacs-lisp-mode-hook #'rgr/elisp-helpers)
        (add-hook 'lisp-interaction-mode-hook #'rgr/elisp-helpers)
        (add-hook 'help-mode-hook #'rgr/elisp-helpers)
        )
    #+end_src

    #+RESULTS:
    | myELisp | edebug-x-mode |

*** Auto-compile
    #+begin_src emacs-lisp
      (use-package
        auto-compile
        :config
        (auto-compile-on-load-mode 1)
        (auto-compile-on-save-mode 1))

      ;; (when (memq window-system '(mac ns x))
      ;;   (exec-path-from-shell-initialize))
    #+end_src
** JSON, YAML Configuration files
*** JSON Editing
    JSON editing using [[https://github.com/joshwnj/json-mode][json-mode]]
    #+begin_src emacs-lisp
      (use-package json-mode)
    #+end_src
*** YAML
**** Modes
     #+begin_src emacs-lisp
       (use-package
         yaml-mode
         :config
         (add-to-list 'auto-mode-alist '("\\.yml\\.yaml\\'" . yaml-mode))
         )
     #+end_src
** Flycheck
   On the fly [[https://github.com/flycheck/flycheck][syntax checking]] for GNU Emacs
   #+begin_src emacs-lisp
     (use-package
       flycheck
       :config (use-package
                 flycheck-pos-tip)
       (flycheck-pos-tip-mode)
       (global-flycheck-mode))
   #+end_src
** Version Control
*** It's [[https://github.com/magit/magit][Magit]]! A Git porcelain inside Emacs
    #+begin_src emacs-lisp
      (use-package
        diff-hl
        :init (global-diff-hl-mode 1))
      (use-package
        magit
        :demand t
        :config (add-hook 'magit-post-commit-hook 'magit-mode-bury-buffer)
        (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
        :bind* ("C-x g" . magit-status)
        )
    #+end_src
*** [[https://github.com/magit/forge][Forge]] ahead with Pull Requests
    #+begin_src emacs-lisp
      (use-package forge
        :after magit)
    #+end_src
** Javascript
   #+begin_src emacs-lisp

     (use-package rjsx-mode
       :config
       (use-package npm-mode)
       (defun my-js2-mode-hook ()
         ;;         (setq-local zeal-at-point-docset '("JavaScript" "jQuery"))
         (npm-mode t)
         (setq-local dash-docs-docsets '("React" "JavaScript" "jQuery")))
       (add-hook 'js2-mode-hook 'my-js2-mode-hook)
       :init
       ;; (add-to-list 'auto-mode-alist '("\\.js?\\'" . js2-mode))
       ;; (add-to-list 'auto-mode-alist '("\\.ts\\'" . js2-mode))
       (add-to-list 'auto-mode-alist '("\\.js?\\'" . rjsx-mode))
       (add-to-list 'auto-mode-alist '("\\.ts\\'" . rjsx-mode))
       )

     (use-package prettier-js
       :custom
       (prettier-js-args '(
                           "--trailing-comma" "all"
                           "--bracket-spacing" "false"
                           "--print-width" "80"
                           )))

     (defun my-js-mode-hook ()
       (setq-local js-indent-level 2)
       (prettier-js-mode t)
       (setq-local dash-docs-docsets '("React" "JavaScript" "jQuery")))

     (add-hook 'js-mode-hook 'my-js-mode-hook)



     ;;(add-to-list 'auto-mode-alist '("\\.ts\\'" . js-mode))
   #+end_src
** RJSX
   [[https://github.com/felipeochoa/rjsx-mode][rjsx-mode]] extends js2-mode to include jsx parsing.
   #+begin_src emacs-lisp
     (use-package rjsx-mode
       :disabled t
       :init
       (add-to-list 'auto-mode-alist '("\\.js\\'" . rjsx-mode))
       (add-to-list 'auto-mode-alist '("\\.ts\\'" . rjsx-mode))
       )
   #+end_src
** Typescript
   #+begin_src emacs-lisp
     (use-package typescript-mode
       :init
       (add-to-list 'auto-mode-alist '("\\.ts?\\'" . typescript-mode))
       (defun my-ts-mode-hook ()
         (setq-local dash-docs-docsets '("React" "JavaScript")))
       (add-hook 'typescript-mode-hook 'my-ts-mode-hook))
   #+end_src
** Tide Mode
   #+begin_src emacs-lisp
     (use-package tide
       :disabled t
       :config
       (defun setup-tide-mode ()
         "Setup function for tide."
         (interactive)
         (tide-setup)
         (flycheck-mode +1)
         (setq flycheck-check-syntax-automatically '(save mode-enabled))
         (eldoc-mode +1)
         (tide-hl-identifier-mode +1)
         (company-mode +1))

       (setq company-tooltip-align-annotations t)
       :init
       (add-hook 'js2-mode-hook #'setup-tide-mode)
       )
   #+end_src
** Language Server Protocol (LSP)
   [[https://github.com/emacs-lsp][Emacs-lsp]] : Language Server Protocol client for Emacs

   #+begin_src emacs-lisp
     ;; if you want to change prefix for lsp-mode keybindings.
     (use-package lsp-mode
       :custom
       (lsp-enable-file-watchers . nil)
       :config
       (use-package
         lsp-ui
         :custom
         (lsp-ui-sideline-show-hover t)
         (lsp-ui-sideline-delay 3)
         (lsp-ui-doc-delay 1.7)
         :config
         (use-package lsp-treemacs
           :config
           (lsp-treemacs-sync-mode 1))
         (define-key lsp-ui-mode-map [(meta ?.)]  #'lsp-ui-peek-find-definitions)
         (define-key lsp-ui-mode-map [(meta ??)] #'lsp-ui-peek-find-references)
         (defun toggle-lsp-ui-sideline ()
           (interactive)
           (if lsp-ui-sideline-mode (progn (message "Disable LSP UI Sideline Mode")
                                           (lsp-ui-sideline-mode -1))
             (progn (message "Enable LSP UI Sideline Mode")
                    (lsp-ui-sideline-mode 1))))
         (defun toggle-lsp-ui-doc ()
           (interactive)
           (if lsp-ui-doc-mode (progn (message "Disable LSP UI Doc Mode")
                                      (lsp-ui-doc-mode -1)
                                      (lsp-ui-doc--hide-frame))
             (progn (lsp-ui-doc-mode 1)
                    (message "Enable LSP UI Doc mode"))))

         (defun my-lsp-ui-doc-glance (&optional w)
           "Trigger display hover information popup and hide it on next typing."
           (interactive)
           (lsp-describe-thing-at-point)
           ;; (message "lsp-ui-doc--displayed:%s" lsp-ui-doc--displayed)
           )
         (defun my-lsp-ui-mode-hook()
           (lsp-ui-sideline-mode -1)
           (lsp-ui-doc-mode -1)
           )

         (defun my-lsp-ui-imenu-view()
           (interactive)
           (lsp-ui-imenu--view)
           )


         :bind ((:map lsp-ui-mode-map
                      ;; rather use helm's imenu< C-c h i>             ("C-c m"   . lsp-ui-imenu)
                      ;;("C-q"   . lsp-ui-doc-show)
                      ("C-S-<f10>" . lsp-ui-imenu)
                      ("M-S-<f9>" . myDapDebugOn)
                      ("C-c S"   . toggle-lsp-ui-sideline)
                      ("C-c D"   . toggle-lsp-ui-doc))
                (:map lsp-ui-imenu-mode-map
                      ("<RET>" . my-lsp-ui-imenu-view)
                      ))

         :hook ((lsp-ui-mode . my-lsp-ui-mode-hook)))

       (use-package dap-mode
         :demand t
         :commands (myDapDebugOn)
         :config
         (setq dap-ui-buffer-configurations
               `((,"*dap-ui-locals*"  . ((side . right) (slot . 1) (window-width . 0.50))) ;; changed this to 0.50
                 (,"*dap-ui-expressions*" . ((side . right) (slot . 2) (window-width . 0.50)))
                 (,"*dap-ui-sessions*" . ((side . right) (slot . 3) (window-width . 0.50)))
                 (,"*dap-ui-breakpoints*" . ((side . left) (slot . 2) (window-width . , 0.20)))
                 (,"*debug-window*" . ((side . bottom) (slot . 3) (window-width . 0.20)))))


         (setq dap-auto-configure-features '(locals  tooltip))
         (require 'dap-gdb-lldb)
         ;;          (dap-gdb-lldb-setup)
         ;; (add-hook 'dap-stopped-hook (lambda (arg)
         ;;                               (call-interactively #'dap-hydra)))

         (require 'dap-chrome)

         ;; (dap-register-debug-template "Chrome Browse my-project"
         ;;   (list :type "chrome"
         ;;         :cwd nil
         ;;         :mode "url"
         ;;         :request "launch"
         ;;         :webRoot "/home/rgr/Dropbox/homefiles/development/projects/react/my-app/"
         ;;         :url "http://localhost:3000"
         ;;         :sourceMap "true"
         ;;         :name "Chrome Browse my-project"))



         (defun myDapDebugOn(p)
           "turn on dap modes"
           (interactive "P")
           (centreCursorLineOn)
           (if p
               (dap-debug nil)
             (dap-debug-last))
           ;;    (dap-hydra)
           )
         (defun my-lsp-mode-hook()
           (lsp-enable-which-key-integration)
           )

         :bind (:map dap-mode-map
                     ("<f8>" . dap-continue)
                     ("S-<f8>" . dap-disconnect)
                     ("C-<f8>" . dap-debug-last)
                     ("<f9>" . dap-hydra)
                     ("<f10>" . dap-next)
                     ("<f11>" . dap-step-in)
                     ("S-<f11>" . dap-step-out)
                     ))
       :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
              ((c-mode c++-mode js-mode php-mode gdscript-mode). lsp)
              ;; if you want which-key integration
              (lsp-mode . my-lsp-mode-hook)))
   #+end_src
**** [[file:~/development/thirdparty/godot/bin][.dir-local.el]] config for a debug template
     #+begin_src emacs-lisp  :tangle no
       ((c++-mode . ((dap-debug-template-configurations . (("Godot LLDB"
                                                            :type "lldb"
                                                            :request "launch"
                                                            :target "/home/rgr/bin/godot")
                                                           ("Godot GDB"
                                                            :type "gdb"
                                                            :request "launch"
                                                            :target "/home/rgr/bin/godot"))))))
     #+end_src


** Serial Port
   #+begin_src emacs-lisp
     (defgroup rgr/serial-ports nil
       "serial port customization"
       :group 'rgr)

     (defcustom rgr/serialIOPort "/dev/ttyACM0"
       "Serial device for emacs to display"
       :type 'string
       :group 'rgr/serial-ports)

     (defcustom rgr/serialIOPortBaud 9600
       "Default serial baud rate"
       :type 'integer
       :group 'rgr/serial-ports)

     (defun selectSerialPortBuffer()
       (setq ser (get-buffer rgr/serialIOPort))
       (if ser (switch-to-buffer ser)
         (serial-term rgr/serialIOPort rgr/serialIOPortBaud)))

     (global-set-key (kbd "C-c s")
                     (lambda()
                       (interactive)
                       (selectSerialPortBuffer)))
   #+end_src
** PlatformIO
   [[https://github.com/emacsmirror/platformio-mode][platformio-mode]] is an Emacs minor mode which allows quick building and uploading of PlatformIO projects with a few short key sequences.
   The build and install process id documented [[https://docs.platformio.org/en/latest/ide/emacs.html][here]].
   #+begin_src emacs-lisp
     (straight-use-package 'platformio-mode)
   #+end_src
** C
*** Clang provides us with some industry standard code prettiers
    #+begin_src emacs-lisp
      (straight-use-package 'clang-format)
      (setq clang-format-style-option "llvm")
      (fset 'c-indent-region 'clang-format-region)
      (fset 'c-indent-buffer 'clang-format-buffer)
    #+end_src
*** C  modes hooks
    #+begin_src emacs-lisp
      (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
      (use-package
        ccls
        :hook ((c++-mode c-mode objc-mode) . (lambda ()
                                               (ccls-use-default-rainbow-sem-highlight)
                                               ;;                 (ccls-code-lens-mode)
                                               )))
      (defun my-c-setup ()
        "Set up my C mode."
        (platformio-mode))
      ;;        (define-key c-mode-map (kbd "C-c s") #'selectSerialPort
      (add-hook 'c-mode-hook #'my-c-setup)
      (add-hook 'objc-mode-hook #'my-c-setup)

    #+end_src
**** TODO look into my-c-setup and platformio code :tangle no
     :LOGBOOK:
     - State "TODO"       from              [2020-08-18 Di 20:48]
     :END:
** C++
   #+begin_src emacs-lisp
     (defun my-c++-mode-hook ()
       (setq-local dash-docs-docsets '("C++")))
     (add-hook 'c++-mode-hook 'my-c++-mode-hook)
   #+end_src
** C#
**** Loading CSharp support
     #+begin_src emacs-lisp
       (use-package csharp-mode)
       (use-package omnisharp)
     #+end_src

** Godot GDScript
   This [[https://github.com/GDQuest/emacs-gdscript-mode][package]] adds support for the GDScript programming language from the Godot game engine in Emacs. It gives syntax highlighting and indentations
   #+begin_src emacs-lisp
     (use-package gdscript-mode
       ;;       :disabled t
       :straight (gdscript-mode
                  :type git
                  :host github
                  :repo "rileyrg/emacs-gdscript-mode")
       :init
       (defun franco/godot-gdscript-lsp-ignore-error (original-function &rest args)
         "Ignore the error message resulting from Godot not replying to the `JSONRPC' request."
         (if (string-equal major-mode "gdscript-mode")
             (let ((json-data (nth 0 args)))
               (if (and (string= (gethash "jsonrpc" json-data "") "2.0")
                        (not (gethash "id" json-data nil))
                        (not (gethash "method" json-data nil)))
                   nil ; (message "Method not found")
                 (apply original-function args)))
           (apply original-function args)))
       (advice-add #'lsp--get-message-type :around #'franco/godot-gdscript-lsp-ignore-error)
       )
   #+end_src

**** TODO 19:03 godo scripts                                          :godot:
     :LOGBOOK:
     - State "TODO"       from              [2020-09-03 Do 19:13]
     :END:

  <rgr_> terminaolgy (and tools) : you run/play a scene which can be associated with scripts. Do you ever in the IDE run a script directly?
  <GodotDiscord> <Calinou> you can, using an option in the script editor menu
  <GodotDiscord> <Calinou> it's not very common though
  <GodotDiscord> <Calinou> https://docs.godotengine.org/en/latest/tutorials/misc/running_code_in_the_editor.html
  <GodotDiscord> <Calinou> see also the EditorScript class, which you need to extend from to use that feature: https://docs.godotengine.org/en/latest/classes/class_editorscript.html
  <rgr_> thank you
  <rgr_> now a niave Q as I dont have mono install installed. is the C# stuff also "script" and the files are "scripts"?
  <GodotDiscord> <Calinou> yes, "script" is a generic term
  <rgr_> and can be run the same way during development?
** tasks :tangle no

*** TODO remove [[*Godot GDScript][workaround]] for lsp notifications errors
    SCHEDULED: <2020-08-22 Sa>
    :LOGBOOK:
    - State "TODO"       from              [2020-08-17 Mo 09:27]
    :END:

** PHP Mode
   #+begin_src emacs-lisp

     (use-package composer :disabled t)

     (defun rgr/debug-php()
       (interactive)
       (dap-debug (cdr (car (cdr dap-debug-template-configurations)))))

     (use-package
       php-mode
       :disabled t
       :commands (php-mode)
       :config
       (defun my-php-mode-hook()
         (setq-local dash-docs-docsets '("Symfony" "PHP")));test
       (add-hook 'php-mode-hook 'my-php-mode-hook)
       (use-package
         transient)
       (use-package
         phpstan)
       (use-package
         flycheck-phpstan
         :after phpstan
         )
       (define-transient-command
         php-transient-menu
         ()
         "Php"
         [["Class" ("cc" "Copy" phpactor-copy-class)
           ("cn" "New" phpactor-create-new-class)
           ("cr" "Move" phpactor-move-class)
           ("ci" "Inflect" phpactor-inflect-class)
           ("n"  "Namespace" phpactor-fix-namespace)]
          ["Properties" ("a"  "Accessor" phpactor-generate-accessors)
           ("pc" "Constructor" phpactor-complete-constructor)
           ("pm" "Add missing props" phpactor-complete-properties)
           ("r" "Rename var locally" phpactor-rename-variable-local)
           ("R" "Rename var in file" phpactor-rename-variable-file)]
          ["Extract" ("ec" "constant" phpactor-extract-constant)
           ("ee" "expression" phpactor-extract-expression)
           ("em"  "method" phpactor-extract-method)]
          ["Methods" ("i" "Implement Contracts" phpactor-implement-contracts)
           ("m"  "Generate method" phpactor-generate-method)]
          ["Navigate" ("x" "List refs" phpactor-list-references)
           ("X" "Replace refs" phpactor-replace-references)
           ("."  "Goto def" phpactor-goto-definition)]
          ["Phpactor" ("s" "Status" phpactor-status)
           ("u" "Install" phpactor-install-or-update)
           ("q" "Quit" transient-quit-all)]])
       (use-package
         phpactor
         :config (use-package
                   company-phpactor))
       :bind (:map php-mode-map
                   ( "C-c C-y" .  yas/create-php-snippet)
                   ( "C-S-<return>" . c-complete-line)
                   ( "C-<return>" . c-newline-below)
                   ( "C-S-y" . c-insert-previous-line)
                   ( "M-<return>" . php-transient-menu)))

     (use-package
       php-scratch
       :bind (:map php-mode-map
                   ("C-x s" . php-scratch)))
   #+end_src
** Web,Symfony and Twig
*** Tasks                                                          :tasklist:
**** DONE put dash docset in here!
     CLOSED: [2020-03-08 So 23:36] DEADLINE: <2020-03-07 Sa> SCHEDULED: <2020-03-06 Fr>
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2020-03-08 So 23:36]
     - State "TODO"       from              [2020-03-06 Fr 03:55]
     :END:
*** The Code
    #+begin_src emacs-lisp
      (use-package
        web-mode
        ;;:disabled t
        :demand t
        :config
        (defun my-web-mode-hook()
          (setq-local dash-docs-docsets '("Twig" "CSS" "HTML"))
          )
        (add-hook 'web-mode-hook 'my-web-mode-hook)
        ;; (add-to-list 'auto-mode-alist '("\\.js?\\'" . web-mode))
        ;; (add-to-list 'auto-mode-alist '("\\.ts\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.twig\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode)))
    #+end_src
** elf-mode - view the symbol list in a binary
   [[https://oremacs.com/2016/08/28/elf-mode/][https://oremacs.com/2016/08/28/elf-mode/]]

   #+begin_src emacs-lisp
     (use-package elf-mode
       :demand t
       :config
       (add-to-list 'auto-mode-alist '("\\.\\(?:a\\|so\\)\\'" . elf-mode)))
   #+end_src
** EDiff - comparing files in Emacs
   #+begin_src emacs-lisp
     (use-package ediff+
       :custom
       (ediff-window-setup-function 'ediff-setup-windows-plain)
       (ediff-split-window-function 'split-window-horizontally)
       :config
       (when (fboundp 'winnder-undo)
         (add-hook 'ediff-after-quit-hook-internal 'winner-undo))
       :bind (:map prog-mode-map ("C-c C-d" . 'ediff-files)))
   #+end_src
* Macros & Utilities
  :PROPERTIES:
  :CUSTOM_ID: macros
  :END:
** move to end of line, add a semi colon and move to next line
   #+begin_src emacs-lisp


     (defun c-complete-line()
       (interactive)
       (end-of-line)
       (unless (eql ?\; (char-after (- (point-at-eol) 1)))
         (progn (insert ";")))
       (newline-and-indent))
     (defun c-insert-previous-line()
       (interactive)
       (previous-line)
       (end-of-line)
       (newline-and-indent)
       (insert (string-trim (current-kill 0))))
     (defun c-newline-below()
       (interactive)
       (end-of-line)
       (newline-and-indent))
   #+end_src
* Privacy
  :PROPERTIES:
  :CUSTOM_ID: privacy
  :END:
  #+begin_src emacs-lisp

    (load (expand-file-name "flowers.el.gpg" user-emacs-directory ))
    (eval-after-load "gnus" '(progn
                               (setq circe-default-nick (nth 0 (auth-source-user-and-password "circe")))
                               (setq circe-default-user (nth 1 (auth-source-user-and-password "circe")))
                               (setq twit-user (nth 0 (auth-source-user-and-password "twitter")))
                               (setq twit-pass (nth 1 (auth-source-user-and-password "twitter")))
                               (setq twittering-username (nth 0 (auth-source-user-and-password
                                                                 "twitter")))
                               (setq twittering-password (nth 1 (auth-source-user-and-password
                                                                 "twitter")))
                               (setq twitter-username (nth 0 (auth-source-user-and-password "twitter")))
                               (setq twitter-password (nth 1(auth-source-user-and-password "twitter")))
                               (setq emms-player-mpd-server-password (nth 1
                                                                          (auth-source-user-and-password
                                                                           "emmsmpd"))          )
                               (setq org-mobile-encryption-password (nth 1(auth-source-user-and-password
                                                                           "org-mobile")))))
  #+end_src

* Host specific setting
  :PROPERTIES:
  :CUSTOM_ID: host-specifics
  :END:
  Sometimes needs machine specific settings eg a larger font on a bigger display.
  #+begin_src emacs-lisp

    (defun load-host-customisation()
      "allow the requiring of a custom-$HOSTNAME library"
      (message (concat "Attempting to require host specific settings: custom-" (system-name)))
      (let ((init-host-feature (intern (concat "custom-" (system-name)))))
        (require init-host-feature nil 'noerror)))
  #+end_src
* Themes
  :PROPERTIES:
  :CUSTOM_ID: screensaver-themes
  :END:
** Themes
   #+begin_src emacs-lisp
     (use-package
       helm-themes
       :config (use-package
                 panda-theme)
       (use-package
         dracula-theme)

       (use-package modus-operandi-theme
         :ensure t)

       (use-package modus-vivendi-theme
         :ensure t)

       (load-theme (if (daemonp) 'modus-vivendi 'panda)  t)
       )
   #+end_src

   #+RESULTS:
   : t
