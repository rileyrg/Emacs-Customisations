(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(Man-notify-method 'pushy)
 '(TeX-macro-global
   '("~/texlive/2013" "~/texlive/2013/texmf-dist/bibtex/bst/" "~/texlive/2013/texmf-dist/tex/" "~/texlive/texmf-local/tex/"))
 '(abbrev-file-name "~/.emacs.d/abbrev_defs")
 '(ack-and-a-half-prompt-for-directory t t)
 '(ack-and-a-half-regexp-search nil t)
 '(ack-executable "/usr/bin/ack" t)
 '(ack-prompt-for-directory t t)
 '(ag-arguments '("--smart-case" "--stats" "--multiline" "-U"))
 '(ag-ignore-list '("value" "cache" "log" "data"))
 '(alert-default-style 'libnotify t)
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(ansi-color-map (ansi-color-make-color-map) t)
 '(ansi-color-names-vector
   ["#2e3436" "#a40000" "#4e9a06" "#c4a000" "#204a87" "#5c3566" "#729fcf" "#eeeeec"])
 '(apropos-do-all t)
 '(async-shell-command-buffer 'confirm-kill-process)
 '(auth-source-debug nil)
 '(auth-sources
   '("~/.gnupg/auth/authirc.gpg" "~/.gnupg/auth/authinfo.gpg" "~/.gnupg/auth/authgmail.gpg" "~/.gnupg/auth/authusenet.gpg"))
 '(auto-revert-check-vc-info t)
 '(auto-save-file-name-transforms '((".*" "/tmp/" t)))
 '(auto-save-interval 0)
 '(auto-save-timeout nil)
 '(backup-by-copying nil)
 '(backup-by-copying-when-linked t)
 '(backup-directory-alist '((".*" . "/tmp/")))
 '(bbdb-complete-mail-allow-cycling t)
 '(bbdb-complete-name-allow-cycling t t)
 '(bbdb-file "~/.bbdb")
 '(beacon-color "purple")
 '(blink-cursor-interval 0.2)
 '(blink-cursor-mode t)
 '(bookmark-default-file "~/.emacs.d/.emacs.bmk")
 '(browse-url-browser-function 'browse-url-default-browser)
 '(c-default-style
   '((c-mode . "k&r")
     (c++-mode . "k&r")
     (java-mode . "java")
     (awk-mode . "awk")
     (other . "gnu")))
 '(calendar-mark-diary-entries-flag t)
 '(calendar-view-diary-initially-flag t)
 '(canlock-password "106923df36ef41eb263045249a447dac2d49649a")
 '(ccls-code-lens-position 'inplace)
 '(ccls-initialization-options '(request: (timeout:5000)))
 '(ccls-sem-highlight-method 'overlay)
 '(company-backends
   '(company-semantic company-cmake company-capf company-files company-dabbrev))
 '(company-box-enable-icon nil)
 '(company-c-headers-path-user
   '("~/.platformio/packages/framework-arduinoavr/cores/arduino/Arduino.h"))
 '(company-dabbrev-downcase nil)
 '(company-irony-ignore-case 'smart)
 '(company-lsp-cache-candidates 'auto)
 '(company-quickhelp-color-background "#4F4F4F")
 '(company-quickhelp-color-foreground "#DCDCCC")
 '(company-tooltip-limit 20)
 '(compilation-error-regexp-alist (mapcar 'car compilation-error-regexp-alist-alist))
 '(compilation-message-face 'default)
 '(confirm-nonexistent-file-or-buffer nil)
 '(cquery-executable "~/.bin/cquery")
 '(cquery-project-root-matchers
   '(projectile-project-root "compile_commands.json" ".cquery" "build/compile_commands.json"))
 '(cquery-project-roots '("~/development/projects/arduino/Blink-cmake-ng"))
 '(create-lockfiles nil)
 '(cua-keep-region-after-copy nil)
 '(cursor-type 'box)
 '(custom-safe-themes
   '("972d69a06b8f6e5d43fb83ff59417511f09ba1a1783aab5e22c0e9cbd25ad458" "d234fa6da0282c254f00d534079374d1c6f3c3e600075bc65fe661fdd1947792" "7d6861c031212fca9b4a963ced6230be2aa3139570b85ea5e77619b1fd0351ad" "9b39b25c3a23b1be6e99a3648b91ebaf2a7efdde236e3472aa95f1708ec61d4f" "3f1dcd824a683e0ab194b3a1daac18a923eed4dba5269eecb050c718ab4d5a26" default))
 '(dashboard-banner-logo-title "Welcome" t)
 '(dashboard-center-content t)
 '(dashboard-set-file-icons t)
 '(dashboard-set-heading-icons t)
 '(dashboard-startup-banner nil t)
 '(delete-active-region 'kill)
 '(delete-old-versions t)
 '(delete-selection-mode t)
 '(desktop-lazy-idle-delay 1)
 '(desktop-load-locked-desktop t)
 '(desktop-minor-mode-table
   '((defining-kbd-macro nil)
     (isearch-mode nil)
     (vc-mode nil)
     (vc-dired-mode nil)
     (erc-track-minor-mode nil)
     (savehist-mode nil)))
 '(desktop-modes-not-to-save '(tags-table-mode dired-mode markdown-mode))
 '(desktop-path '("~/.emacs.d/"))
 '(desktop-restore-eager 10)
 '(desktop-restore-frames nil)
 '(devdocs-alist
   '((c-mode . "c")
     (c++-mode . "c++")
     (clojure-mode . "clojure")
     (coffee-mode . "CoffeeScript")
     (common-lisp-mode . "lisp")
     (cperl-mode . "perl")
     (css-mode . "css")
     (elixir-mode . "elixir")
     (enh-ruby-mode . "ruby")
     (erlang-mode . "erlang")
     (gfm-mode . "markdown")
     (go-mode . "go")
     (groovy-mode . "groovy")
     (haskell-mode . "haskell")
     (html-mode . "html")
     (java-mode . "java")
     (js2-mode . "jquery")
     (js3-mode . "javascript")
     (less-css-mode . "less")
     (lua-mode . "lua")
     (markdown-mode . "markdown")
     (perl-mode . "perl")
     (php-mode . "php")
     (processing-mode . "processing")
     (puppet-mode . "puppet")
     (python-mode . "python")
     (ruby-mode . "ruby")
     (sass-mode . "sass")
     (scala-mode . "scala")
     (tcl-mode . "tcl")))
 '(diary-file "~/.diary")
 '(diary-list-include-blanks t)
 '(diary-mark-entries-hook '(diary-mark-included-diary-files))
 '(diary-number-of-entries 7)
 '(dictionary-server "localhost")
 '(diredp-hide-details-initially-flag nil)
 '(display-buffer-alist
   '(("\\*Symfony Web Server\\*.*" display-buffer-no-window)
     (popwin:display-buffer-condition popwin:display-buffer-action)))
 '(display-time-mode t)
 '(ediff-split-window-function 'split-window-horizontally)
 '(ediff-window-setup-function 'ediff-setup-windows-plain)
 '(elscreen-display-tab nil)
 '(emms-source-file-default-directory "~/Music/")
 '(enable-local-eval t)
 '(enable-local-variables :all)
 '(enable-recursive-minibuffers t)
 '(epa-file-cache-passphrase-for-symmetric-encryption nil)
 '(erc-autojoin-channels-alist
   '(("irc.freenode.net" "##php" "#emacs" "#symfony" "#elisp" "#arduino" "#guitarix" "#ardour" "#debian" "##programming" "##linux")
     ("oftc.net" "#debian-next")))
 '(erc-autojoin-delay 1)
 '(erc-autojoin-domain-only nil)
 '(erc-autojoin-mode t)
 '(erc-autojoin-timing 'ident)
 '(erc-fill-column 128)
 '(erc-fill-function 'erc-fill-static)
 '(erc-fill-mode t)
 '(erc-fill-static-center 1)
 '(erc-format-nick-function 'rgr/erc-format-nick)
 '(erc-header-line-format "")
 '(erc-hide-list '("353" "JOIN" "KICK" "NICK" "PART" "QUIT" "MODE"))
 '(erc-hide-timestamps nil)
 '(erc-input-line-position nil)
 '(erc-insert-timestamp-function 'erc-insert-timestamp-left)
 '(erc-join-buffer 'bury)
 '(erc-kill-buffer-on-part t)
 '(erc-kill-queries-on-quit t)
 '(erc-kill-server-buffer-on-quit t)
 '(erc-match-mode t)
 '(erc-max-buffer-size 20000)
 '(erc-minibuffer-notice nil)
 '(erc-modules
   '(autojoin button fill irccontrols match move-to-prompt noncommands readonly ring services smiley stamp track truncate))
 '(erc-nick-uniquifier "_DUP")
 '(erc-nickserv-identify-mode 'autodetect)
 '(erc-notice-highlight-type 'prefix)
 '(erc-notifications-mode t)
 '(erc-pcomplete-mode t)
 '(erc-prompt "#>")
 '(erc-prompt-for-nickserv-password nil)
 '(erc-prompt-for-password nil)
 '(erc-query-display 'window-noselect)
 '(erc-scrolltobottom-mode nil)
 '(erc-server-auto-reconnect nil)
 '(erc-server-reconnect-attempts t)
 '(erc-stamp-mode t)
 '(erc-startup-file-list nil)
 '(erc-system-name nil)
 '(erc-timestamp-format "[%T]")
 '(erc-timestamp-format-right nil)
 '(erc-timestamp-only-if-changed-flag nil)
 '(erc-track-enable-keybindings nil)
 '(erc-track-exclude '("324" "332" "333" "353" "329"))
 '(erc-track-exclude-types
   '("JOIN" "NICK" "PART" "QUIT" "MODE" "324" "329" "332" "333" "353" "477"))
 '(erc-truncate-buffer-on-save t)
 '(erc-try-new-nick-p t)
 '(erc-user-mode nil)
 '(erc-whowas-on-nosuchnick t)
 '(eshell-banner-message
   "
W.O.P.R Online...
Syncing. Please Wait.

Greetings Professor Falken.
Would you like to play a game?

")
 '(eshell-hist-ignoredups t)
 '(eshell-history-size nil)
 '(eval-expression-print-length nil)
 '(expand-region-smart-cursor t)
 '(fci-rule-color "#14151E" t)
 '(ffap-require-prefix t)
 '(fill-column 256)
 '(flycheck-checkers
   '(ada-gnat asciidoctor asciidoc bazel-buildifier c/c++-clang c/c++-gcc c/c++-cppcheck cfengine chef-foodcritic coffee coffee-coffeelint coq css-csslint css-stylelint cuda-nvcc cwl d-dmd dockerfile-hadolint emacs-lisp emacs-lisp-checkdoc erlang-rebar3 erlang eruby-erubis eruby-ruumba fortran-gfortran go-gofmt go-golint go-vet go-build go-test go-errcheck go-unconvert go-staticcheck groovy haml handlebars haskell-stack-ghc haskell-ghc haskell-hlint html-tidy javascript-eslint javascript-jshint javascript-standard json-jsonlint json-python-json json-jq jsonnet less less-stylelint llvm-llc lua-luacheck lua markdown-markdownlint-cli markdown-mdl nix nix-linter opam perl perl-perlcritic php php-phpmd php-phpcs phpstan processing proselint protobuf-protoc protobuf-prototool pug puppet-parser puppet-lint python-flake8 python-pylint python-pycompile python-mypy r-lintr racket rpm-rpmlint rst-sphinx rst ruby-rubocop ruby-reek ruby-rubylint ruby ruby-jruby rust-cargo rust rust-clippy scala scala-scalastyle scheme-chicken scss-lint scss-stylelint sass/scss-sass-lint sass scss sh-bash sh-posix-dash sh-posix-bash sh-zsh sh-shellcheck slim slim-lint sql-sqlint systemd-analyze tcl-nagelfar terraform terraform-tflint tex-chktex tex-lacheck texinfo textlint typescript-tslint verilog-verilator vhdl-ghdl xml-xmlstarlet xml-xmllint yaml-jsyaml yaml-ruby yaml-yamllint lsp))
 '(flycheck-disabled-checkers '(emacs-lisp-checkdoc javascript-jshint json-jsonlist))
 '(flycheck-display-errors-delay 0.3 nil nil "Customized with use-package flycheck")
 '(frecentf-ignore-paths
   '("/home/rgr/.emacs.d/persp-confs" "/home/rgr/.emacs.d/orgfiles"))
 '(gc-cons-threshold 100000000)
 '(gdscript-docs-local-path
   "/home/rgr/Documents/Programming/Godot/www/docs.godotengine.org/en/stable")
 '(gdscript-docs-use-eww nil)
 '(geben-dbgp-default-port 8000)
 '(git-gutter:update-interval 2)
 '(global-mark-ring-max 32)
 '(gnus-activate-level 3)
 '(gnus-article-sort-functions '((not gnus-article-sort-by-date)))
 '(gnus-desktop-notify-exec-program "notify-send")
 '(gnus-desktop-notify-groups 'gnus-desktop-notify-explicit)
 '(gnus-directory "~/.News/")
 '(gnus-group-default-list-level 3)
 '(gnus-group-line-format "%M%S%5y/%-8t: %G
")
 '(gnus-group-mode-hook '(gnus-topic-mode))
 '(gnus-group-use-permanent-levels nil)
 '(gnus-interactive-catchup nil)
 '(gnus-interactive-exit nil)
 '(gnus-message-archive-group nil)
 '(gnus-permanently-visible-groups "INBOX\\|Google\\ Mail")
 '(gnus-save-newsrc-file t)
 '(gnus-select-method '(nnnil "news"))
 '(gnus-show-threads t)
 '(gnus-thread-sort-functions '((not gnus-thread-sort-by-date)))
 '(gnus-use-dribble-file nil)
 '(google-this-keybind "g")
 '(google-translate-default-source-language "de")
 '(google-translate-default-target-language "en")
 '(grep-find-ignored-directories
   '("SCCS" "RCS" "CVS" "MCVS" ".src" ".svn" ".git" ".hg" ".bzr" "_MTN" "_darcs" "{arch}" "var" "cache"))
 '(haskell-process-auto-import-loaded-modules t)
 '(haskell-process-log t)
 '(haskell-process-suggest-remove-import-lines t)
 '(helm-ag--extra-options "--skip-vcs-ignores" t)
 '(helm-always-two-windows t)
 '(helm-autoresize-mode t)
 '(helm-buffer-max-length 64)
 '(helm-buffers-fuzzy-matching t)
 '(helm-candidate-numer 50 t)
 '(helm-eshell-fuzzy-match t)
 '(helm-ff-auto-update-initial-value t)
 '(helm-ff-skip-boring-files t)
 '(helm-ff-skip-git-ignored-files nil)
 '(helm-follow-mode-persistent t)
 '(helm-grep-ag-command
   "rg --color=never --smart-case --no-heading --line-number %s %s %s")
 '(helm-grep-default-recurse-command "grep --color=always -i -a -d recurse %e -n%cH -e %p %f")
 '(helm-grep-git-grep-command "git --no-pager grep -n%cH --full-name -e %p -- %f")
 '(helm-grep-ignored-directories
   '("SCCS/" "RCS/" "CVS/" "MCVS/" ".svn/" ".git/" ".hg/" ".bzr/" "_MTN/" "_darcs/" "{arch}/" ".gvfs/" "/translations/"))
 '(helm-grep-ignored-files
   '("*.md" ".#*" "*.o" "*~" "*.bin" "*.lbin" "*.so" "*.a" "*.ln" "*.blg" "*.bbl" "*.elc" "*.lof" "*.glo" "*.idx" "*.lot" "*.fmt" "*.tfm" "*.class" "*.fas" "*.lib" "*.mem" "*.x86f" "*.sparcf" "*.dfsl" "*.pfsl" "*.d64fsl" "*.p64fsl" "*.lx64fsl" "*.lx32fsl" "*.dx64fsl" "*.dx32fsl" "*.fx64fsl" "*.fx32fsl" "*.sx64fsl" "*.sx32fsl" "*.wx64fsl" "*.wx32fsl" "*.fasl" "*.ufsl" "*.fsl" "*.dxl" "*.lo" "*.la" "*.gmo" "*.mo" "*.toc" "*.aux" "*.cp" "*.fn" "*.ky" "*.pg" "*.tp" "*.vr" "*.cps" "*.fns" "*.kys" "*.pgs" "*.tps" "*.vrs" "*.pyc" "*.pyo"))
 '(helm-recentf-fuzzy-match t)
 '(helm-rg-default-directory 'git-root)
 '(helm-source-names-using-follow nil)
 '(helm-truncate-lines t)
 '(helm-turn-on-recentf nil)
 '(help-window-select t nil nil "Customized with use-package helm")
 '(history-delete-duplicates t)
 '(ibuffer-deletion-face 'diredp-deletion-file-name)
 '(ibuffer-marked-face 'diredp-flag-mark)
 '(indent-tabs-mode nil)
 '(indium-chrome-executable "google-chrome")
 '(inhibit-startup-screen t)
 '(ispell-dictionary nil)
 '(ispell-local-dictionary "british")
 '(ispell-program-name "/usr/bin/aspell")
 '(ispell-query-replace-choices t)
 '(ispell-silently-savep t)
 '(kept-new-versions 20)
 '(large-file-warning-threshold nil)
 '(lookup-reference-functions
   '(my-describe-symbol goldendict-dwim my-dictionary-search my-linguee-lookup my-jquery-lookup google-this-search))
 '(magit-diff-use-overlays nil t)
 '(magit-section-initial-visibility-alist '((stashes . hide) (unmerged . hide)))
 '(menu-bar-mode nil)
 '(message-completion-alist
   '(("^\\(Newsgroups\\|Followup-To\\|Posted-To\\|Gcc\\):" . message-expand-group)
     ("^\\(Resent-\\)?\\(To\\|B?Cc\\):" . helm-bbdb-expand-name)
     ("^\\(Reply-To\\|From\\|Mail-Followup-To\\|Mail-Copies-To\\):" . helm-bbdb-expand-name)
     ("^\\(Disposition-Notification-To\\|Return-Receipt-To\\):" . helm-bbdb-expand-name)))
 '(nrepl-message-colors
   '("#CC9393" "#DFAF8F" "#F0DFAF" "#7F9F7F" "#BFEBBF" "#93E0E3" "#94BFF3" "#DC8CC3"))
 '(org-agenda-files
   '("/home/rgr/.emacs.d/orgfiles/ardour.org" "/home/rgr/.emacs.d/orgfiles/diary.org" "/home/rgr/.emacs.d/orgfiles/electronics.org" "/home/rgr/.emacs.d/orgfiles/emacs.org" "/home/rgr/.emacs.d/orgfiles/journal.org" "/home/rgr/.emacs.d/orgfiles/linux.org" "/home/rgr/.emacs.d/orgfiles/lyrics.org" "/home/rgr/.emacs.d/orgfiles/orders.org" "/home/rgr/.emacs.d/orgfiles/other.org" "/home/rgr/.emacs.d/orgfiles/programming.org" "/home/rgr/.emacs.d/orgfiles/refile.org" "/home/rgr/.emacs.d/orgfiles/trash.org"))
 '(org-agenda-include-diary t)
 '(org-agenda-remove-tags t)
 '(org-agenda-restore-windows-after-quit t)
 '(org-agenda-show-inherited-tags t)
 '(org-agenda-skip-deadline-if-done t)
 '(org-agenda-skip-scheduled-if-done t)
 '(org-agenda-start-on-weekday 0)
 '(org-agenda-window-setup 'current-window)
 '(org-babel-load-languages '((emacs-lisp . t) (python . t)))
 '(org-capture-templates
   '(("t" "Todo" entry
      (file+headline "refile.org" "Tasks To Refile")
      "* TODO %?
:PROPERTIES:
:DateCreated: %T
:END:
")
     ("n" "Quick note to refile later" entry
      (file+headline "refile.org" "Notes To Refile")
      "* %?
        :PROPERTIES:
        :DateCreated: %T
        :END:
%i
%a")
     ("z" "default" entry
      (file+olp+datetree "journal.org")
      "* %^{Title}
        :PROPERTIES:
        :DateCreated: %T
        :END:" :empty-lines 1)
     ("o" "Orders" entry
      (file "~/.emacs.d/orgfiles/orders.org")
      "* WAITING %^{Order name} :order:
SCHEDULED: %^{Delivery Date}t
:PROPERTIES:
:DateCreated: %T
:END:")))
 '(org-clock-into-drawer t)
 '(org-clock-persist 'history)
 '(org-clock-task-overrun-text "*LATE*")
 '(org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM")
 '(org-completion-use-ido t t)
 '(org-confirm-babel-evaluate nil)
 '(org-contacts-files '("~/.emacs.d/orgfiles/contacts.org") t)
 '(org-crypt-key "AB23BE58")
 '(org-default-notes-file "refile.org")
 '(org-directory "~/.emacs.d")
 '(org-enforce-todo-dependencies t)
 '(org-export-backends '(ascii html icalendar latex md odt))
 '(org-export-html-xml-declaration
   '(("php" . "<?php echo \"<?xml version=\\\"1.0\\\" encoding=\\\"%s\\\" ?>\"; ?>")) t)
 '(org-fast-tag-selection-single-key t)
 '(org-global-properties
   '(("Effort_All" . "Effort_ALL 0 0:10 0:30 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00")))
 '(org-google-weather-location "Hamburg,Germany" t)
 '(org-journal-dir "~/.emacs.d/orgfiles/journal-files")
 '(org-journal-file-format "%Y%m%d.org")
 '(org-link-abbrev-alist
   '(("gmap" . "http://maps.google.com/maps?q=%s")
     ("omap" . "http://nominatim.openstreetmap.org/search?q=%s&polygon=1")
     ("goog" . "http://www.google.com/search?q=%s")))
 '(org-link-frame-setup
   '((vm . vm-visit-folder-other-frame)
     (gnus . org-gnus-no-new-news)
     (file . find-file-other-window)))
 '(org-link-search-must-match-exact-headline nil)
 '(org-log-done 'time)
 '(org-log-into-drawer t)
 '(org-log-note-clock-out t)
 '(org-log-note-headings
   '((done . "CLOSING NOTE %t")
     (state . "State %-12s from %-12S %t")
     (note . "Note taken on %t")
     (reschedule . "Rescheduled from %S on %t")
     (delschedule . "Not scheduled, was %S on %t")
     (redeadline . "New deadline from %S on %t")
     (deldeadline . "Removed deadline, was %S on %t")
     (refile . "Refiled on %t")
     (clock-out . "")))
 '(org-log-refile 'note)
 '(org-mobile-directory "~/Dropbox/MobileOrg" t)
 '(org-mobile-encryption-password "zzyy" t)
 '(org-mobile-inbox-for-pull "~/.emacs.d/orgfiles/refile.org" t)
 '(org-mobile-use-encryption nil t)
 '(org-modules
   '(ol-bbdb ol-bibtex ol-docview ol-eww ol-gnus ol-info ol-irc ol-mhe ol-rmail org-tempo ol-w3m))
 '(org-outline-path-complete-in-steps nil t)
 '(org-protocol-default-template-key "z")
 '(org-publish-timestamp-directory "~/.emacs.d/orgfiles/.org-timestamps/")
 '(org-refile-allow-creating-parent-nodes 'confirm)
 '(org-remember-clock-out-on-exit nil t)
 '(org-return-follows-link t)
 '(org-reverse-note-order t)
 '(org-roam-directory "~/.emacs.d/orgfiles/roam-files/")
 '(org-src-window-setup 'current-window)
 '(org-startup-indented nil)
 '(org-tag-alist
   '(("visa" . 118)
     ("bike" . 98)
     (:startgroup)
     ("@shamrock" . 115)
     ("@home" . 104)
     ("@dublin" . 100)
     (:endgroup)
     (:startgroup)
     ("online" . 111)
     ("offline" . 79)
     (:endgroup)
     (:startgroup)
     ("business" . 98)
     ("personal" . 112)
     (:endgroup)
     ("shopping" . 115)
     ("@caravan" . 99)
     ("emacs" . 101)
     ("vocab" . 118)
     ("programming" . 99)
     ("webs" . 119)
     ("idea" . 105)
     ("fitness" . 102)
     ("electronics" . 69)
     ("gardening" . 103)))
 '(org-tag-persistent-alist '(("noexport" . 110) ("trash" . 116)))
 '(org-tags-exclude-from-inheritance '("PROJECT" "DEFAULTCLOCKTASK" "crypt"))
 '(org-todo-keyword-faces
   '(("TODO" :foreground "red" :weight bold)
     ("STARTED" :foreground "green" :weight bold)
     ("DONE" :foreground "forest green" :weight bold)
     ("WAITING" :foreground "orange" :weight bold)
     ("SOMEDAY" :foreground "magenta" :weight bold)
     ("CANCELLED" :foreground "forest green" :weight bold)
     ("QUOTE" :foreground "red" :weight bold)
     ("QUOTED" :foreground "magenta" :weight bold)
     ("APPROVED" :foreground "forest green" :weight bold)
     ("EXPIRED" :foreground "forest green" :weight bold)
     ("REJECTED" :foreground "forest green" :weight bold)
     ("OPEN" :foreground "blue" :weight bold)))
 '(org-todo-keywords
   '((sequence "TODO(t!)" "STARTED(s!)" "|" "DONE(d!/!)")
     (sequence "WAITING(w@/!)" "SOMEDAY(S!)" "OPEN(O@)" "|" "CANCELLED(c@/!)")
     (sequence "QUOTE(q!)" "QUOTED(Q!)" "|" "APPROVED(A@)" "EXPIRED(E@)" "REJECTED(R@)")))
 '(org-todo-state-tags-triggers
   '(("CANCELLED"
      ("CANCELLED" . t))
     ("WAITING"
      ("WAITING" . t)
      ("NEXT"))
     ("SOMEDAY"
      ("WAITING" . t))
     (done
      ("NEXT")
      ("WAITING"))
     ("TODO"
      ("WAITING")
      ("CANCELLED")
      ("NEXT"))
     ("STARTED"
      ("WAITING"))
     ("DONE"
      ("WAITING")
      ("CANCELLED")
      ("NEXT"))))
 '(org-treat-S-cursor-todo-selection-as-state-change nil)
 '(org-use-fast-todo-selection t)
 '(org-use-speed-commands t)
 '(password-cache-expiry nil)
 '(pdf-view-midnight-colors '("#DCDCCC" . "#383838"))
 '(php-manual-url "http://www.php.net")
 '(php-mode-speedbar-open nil)
 '(php-search-url "http://www.php.net/manual-lookup.php?pattern=")
 '(pomidor-break-seconds 300 t)
 '(pomidor-seconds 1500 t)
 '(pomidor-sound-tack nil t)
 '(pomidor-sound-tick nil t)
 '(pomodoro-desktop-notification t)
 '(pos-tip-background-color "#FFFACE")
 '(pos-tip-foreground-color "#272822")
 '(prettier-js-args '("--trailing-comma" "all" "--bracket-spacing" "false"))
 '(projectile-cache-file "/home/rgr/.emacs.d/.projectile.cache")
 '(projectile-completion-system 'helm)
 '(ps-font-size '(12 . 12))
 '(ps-lpr-switches '("-o Duplex=DuplexNoTumble"))
 '(ps-paper-type 'a4)
 '(ps-spool-duplex t)
 '(py-python-command-args '("-colors" "Linux") t)
 '(rainbow-ansi-colors-major-mode-list '(sh-mode c-mode c++-mode php-mode emacs-lisp-mode))
 '(read-process-output-max 1048576 t)
 '(read-quoted-char-radix 16)
 '(rebox-style-loop '(27 25 21) t)
 '(recentf-exclude
   '("/\\(\\(\\(COMMIT\\|NOTES\\|PULLREQ\\|MERGEREQ\\|TAG\\)_EDIT\\|MERGE_\\|\\)MSG\\|\\(BRANCH\\|EDIT\\)_DESCRIPTION\\)\\'" "\\.orgfiles/.*" "\\.md$" "\\recentf$" "config\\.el$"))
 '(recentf-max-saved-items 500)
 '(red "#ffffff" t)
 '(rgr/chat-close-functions '(slack-ws-close rgr/erc-quit))
 '(rgr/chat-functions '(rgr/erc-start slack-start))
 '(rgr/serialIOPort "/dev/ttyACM0")
 '(ring-bell-function 'ignore)
 '(rtags-completions-enabled t)
 '(rtags-display-result-backend 'helm)
 '(rtags-periodic-reparse-timeout 5.0)
 '(safe-local-variable-values
   '((enable-local-variables: . all)
     (eval add-hook 'after-save-hook 'org-md-export-to-markdown nil t)
     (progn
       (make-local-variable 'process-environment)
       (setq process-environment
             (copy-sequence process-environment))
       (setenv "ARDUINO_SDK_PATH" "~/development/arduino/arduinoSDK"))
     (projectile-project-compilation-cmd . "cmake .. && make Blink_flash")
     (progn
       (make-local-variable 'process-environment)
       (setq process-environment
             (copy-sequence process-environment))
       (setenv "ARDUINO_SDK_PATH " "~/development/thirdparty/arduinoSDK"))
     (projectile-project-compilation-cmd . "cmake .. && make DigitalInputs_flash")
     (projectile-project-compilation-dir . "build")))
 '(save-interprogram-paste-before-kill t)
 '(scroll-bar-mode nil)
 '(scroll-conservatively 10000)
 '(scroll-step 1)
 '(send-mail-function 'smtpmail-send-it)
 '(session-save-file "~/.emacs.d/.session" t)
 '(set-mark-command-repeat-pop t)
 '(shell-switcher-ask-before-creating-new t)
 '(show-paren-delay 0.3)
 '(show-paren-mode t)
 '(show-paren-style 'parenthesis)
 '(sql-input-ring-file-name "~/.mysql_history")
 '(sql-port 5432)
 '(straight-vc-git-default-protocol 'ssh)
 '(symfony-server-command "symfony serve")
 '(synonyms-cache-file "~/.emacs.d/syn.cache")
 '(synonyms-file "~/.emacs.d/mthesaur.txt")
 '(synosaurus-backend 'synosaurus-backend-openthesaurus)
 '(synosaurus-choose-method 'popup)
 '(tab-always-indent 'complete)
 '(tags-add-tables nil)
 '(tags-revert-without-query t)
 '(tags-table-list '("~/.emacs.d/" "~/development/gitprojects/barwebs/lib"))
 '(thesaurus-bhl-api-key "140ced1a60f9c434bb1dbc6831d2f6e9" t)
 '(tool-bar-mode nil)
 '(tooltip-frame-parameters
   '((name . "tooltip")
     (internal-border-width . 2)
     (border-width . 1)
     (no-special-glyphs . t)
     (alpha . 70)))
 '(tramp-default-method "ssh")
 '(tramp-default-proxies-alist nil)
 '(twittering-connection-type-order '(wget curl urllib-http native urllib-https))
 '(twittering-mode-hook nil)
 '(twittering-status-format
   "%RT{%FACE[bold]{RT}}%i %S(%s),  %@:
%FOLD[  ]{%T // from %f%L%r%R%QT{
+----
%FOLD[|]{%i %s,  %@:
%FOLD[  ]{%T // from %f%L%r%R}}
+----}}
 ")
 '(twittering-use-master-password t)
 '(uniquify-buffer-name-style 'forward nil (uniquify))
 '(url-standalone-mode nil)
 '(user-mail-address "rileyrg@gmail.com")
 '(vc-annotate-background nil t)
 '(vc-annotate-color-map
   '((20 . "#d54e53")
     (40 . "goldenrod")
     (60 . "#e7c547")
     (80 . "DarkOliveGreen3")
     (100 . "#70c0b1")
     (120 . "DeepSkyBlue1")
     (140 . "#c397d8")
     (160 . "#d54e53")
     (180 . "goldenrod")
     (200 . "#e7c547")
     (220 . "DarkOliveGreen3")
     (240 . "#70c0b1")
     (260 . "DeepSkyBlue1")
     (280 . "#c397d8")
     (300 . "#d54e53")
     (320 . "goldenrod")
     (340 . "#e7c547")
     (360 . "DarkOliveGreen3")) t)
 '(vc-annotate-very-old-color nil t)
 '(vc-follow-symlinks t)
 '(visible-bell t)
 '(wg-session-file "~/.emacs.d/emacs_workgroups")
 '(whitespace-style '(tabs trailing lines-tail empty))
 '(windmove-wrap-around t)
 '(yank-pop-change-selection t)
 '(zone-programs [zone-matrix] t))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:height 98 :family "DejaVu Sans" :foundry "PfEd" :slant normal :weight normal :width normal))))
 '(company-box-annotation ((t (:inherit company-tooltip-annotation :height 113))))
 '(company-box-candidate ((t (:foreground "white" :height 113))))
 '(company-box-scrollbar ((t nil)))
 '(company-tooltip ((t nil)))
 '(company-tooltip-annotation ((t (:foreground "gold"))))
 '(company-tooltip-selection ((t (:background "SeaGreen4"))))
 '(cursor ((t (:background "gold" :foreground "black"))))
 '(dap-ui-locals-variable-face ((t (:inherit font-lock-builtin-face :foreground "white smoke"))))
 '(dap-ui-locals-variable-leaf-face ((t (:inherit nil :slant italic))))
 '(dap-ui-marker-face ((t (:background "dim gray" :underline "orange"))))
 '(dired-directory ((t (:foreground "burlywood" :weight extra-bold))))
 '(dired-symlink ((t (:inherit nil :foreground "yellow"))))
 '(erc-current-nick-face ((t (:background "dim gray" :height 148 :foreground "red" :weight bold))))
 '(erc-nick-default-face ((t (:weight light))))
 '(erc-timestamp-face ((t (:inherit erc-default-face :foreground "green" :weight semi-light))))
 '(font-lock-doc-face ((t (:foreground "light gray"))))
 '(font-lock-keyword-face ((t (:foreground "white smoke" :weight bold))))
 '(font-lock-type-face ((t (:foreground "light goldenrod"))))
 '(git-commit-summary ((t (:inherit nil))))
 '(gnus-group-mail-3-empty ((t (:foreground "gray"))))
 '(helm-ff-dotted-directory ((t (:background "dim gray" :foreground "white"))))
 '(helm-ff-file ((t (:inherit font-lock-builtin-face :foreground "white smoke"))))
 '(helm-grep-file ((t nil)))
 '(helm-grep-lineno ((t (:foreground "lawn green"))))
 '(helm-grep-match ((t (:foreground "yellow"))))
 '(helm-header ((t nil)))
 '(helm-rg-active-arg-face ((t nil)))
 '(helm-rg-base-rg-cmd-face ((t nil)))
 '(helm-rg-colon-separator-ripgrep-output-face ((t nil)))
 '(helm-rg-directory-cmd-face ((t nil)))
 '(helm-rg-directory-header-face ((t nil)))
 '(helm-rg-error-message ((t nil)))
 '(helm-rg-extra-arg-face ((t nil)))
 '(helm-rg-file-match-face ((t nil)))
 '(helm-rg-inactive-arg-face ((t (:foreground "lawn green"))))
 '(helm-rg-match-text-face ((t (:foreground "green"))))
 '(helm-rg-preview-line-highlight ((t (:foreground "lawn green"))))
 '(helm-rg-title-face ((t nil)))
 '(helm-selection ((t (:background "orange red" :underline nil))))
 '(helm-separator ((t nil)))
 '(helm-source-header ((t nil)))
 '(hl-line ((t (:background "coral"))))
 '(internal-border ((t (:foreground "orange" :width normal))))
 '(lsp-face-highlight-read ((t (:inherit highlight :background "gray32" :underline t))))
 '(lsp-face-highlight-write ((t (:inherit nil :background "dim gray" :foreground "gold"))))
 '(lsp-ui-doc-background ((t nil)))
 '(lsp-ui-sideline-code-action ((t (:foreground "red"))))
 '(lsp-ui-sideline-current-symbol ((t (:foreground "tomato" :box (:line-width -1 :color "light gray") :weight ultra-bold :height 0.99))))
 '(lsp-ui-sideline-symbol ((t (:foreground "dark gray" :box (:line-width -1 :color "white smoke") :height 0.99))))
 '(org-archived ((t (:background "#181a20" :foreground "#a8a8a8" :height 0.8))))
 '(org-block-end-line ((t (:inherit nil :extend t))))
 '(org-level-1 ((t (:inherit bold :foreground "yellow" :height 1.3))))
 '(org-scheduled-previously ((t (:background "firebrick" :foreground "yellow" :inverse-video nil))))
 '(org-tag ((t (:background "#373844" :foreground "dark orange" :weight bold))))
 '(php-$this ((t (:foreground "gray"))))
 '(php-$this-sigil ((t (:inherit php-constant :foreground "gray88"))))
 '(php-class ((t nil)))
 '(php-doc-annotation-tag ((t (:inherit font-lock-constant-face :foreground "chartreuse"))))
 '(php-function-name ((t (:foreground "orange1"))))
 '(php-keyword ((t nil)))
 '(php-method-call ((t (:inherit php-function-call :foreground "chartreuse"))))
 '(php-string ((t (:inherit nil :foreground "lemon chiffon"))))
 '(php-type ((t (:inherit font-lock-type-face :foreground "pale goldenrod"))))
 '(php-variable-name ((t (:inherit font-lock-variable-name-face :foreground "antique white"))))
 '(php-variable-sigil ((t (:foreground "dark gray" :weight semi-light))))
 '(popup-face ((t (:inherit default))))
 '(rainbow-delimiters-base-error-face ((t (:inherit rainbow-delimiters-base-face :background "gainsboro" :foreground "red"))))
 '(tooltip ((t (:inherit variable-pitch :background "dim gray" :foreground "orange"))))
 '(treemacs-git-modified-face ((t (:inherit font-lock-variable-name-face :background "yellow" :foreground "red")))))


(message "Custom loading completed.")
